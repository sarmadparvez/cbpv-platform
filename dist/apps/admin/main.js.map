{"version":3,"file":"main.js","mappings":"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","sources":["webpack://cbpv-platform//Users/sarmadparvez/Thesis/cbpv-platform2/apps/admin/src/app/migration|sync|/\\.ts$/","webpack://cbpv-platform/./apps/admin/src/app/app.module.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/auth.controller.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/auth.module.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/auth.service.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/constants.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/dto/login-response.dto.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/dto/login.dto.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/google.strategy.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/jwt-auth.guard.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/jwt.strategy.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/local-auth-guard.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/local.strategy.ts","webpack://cbpv-platform/./apps/admin/src/app/auth/public.decorator.ts","webpack://cbpv-platform/./apps/admin/src/app/common/global-exception-filter.ts","webpack://cbpv-platform/./apps/admin/src/app/countries/countries.controller.ts","webpack://cbpv-platform/./apps/admin/src/app/countries/countries.module.ts","webpack://cbpv-platform/./apps/admin/src/app/countries/countries.service.ts","webpack://cbpv-platform/./apps/admin/src/app/countries/entities/country.entity.ts","webpack://cbpv-platform/./apps/admin/src/app/data/yaml-to-database.ts","webpack://cbpv-platform/./apps/admin/src/app/iam/iam.controller.ts","webpack://cbpv-platform/./apps/admin/src/app/iam/iam.module.ts","webpack://cbpv-platform/./apps/admin/src/app/iam/iam.service.ts","webpack://cbpv-platform/./apps/admin/src/app/iam/policy.ts","webpack://cbpv-platform/./apps/admin/src/app/migration/1640532247325-skills-seed.ts","webpack://cbpv-platform/./apps/admin/src/app/migration/1640548061457-countries-seed.ts","webpack://cbpv-platform/./apps/admin/src/app/skills/entities/skill.entity.ts","webpack://cbpv-platform/./apps/admin/src/app/skills/skills.controller.ts","webpack://cbpv-platform/./apps/admin/src/app/skills/skills.module.ts","webpack://cbpv-platform/./apps/admin/src/app/skills/skills.service.ts","webpack://cbpv-platform/./apps/admin/src/app/users/dto/batch-get-user-info.dto.ts","webpack://cbpv-platform/./apps/admin/src/app/users/dto/create-user.dto.ts","webpack://cbpv-platform/./apps/admin/src/app/users/dto/create-with-sso.dto.ts","webpack://cbpv-platform/./apps/admin/src/app/users/dto/update-user.dto.ts","webpack://cbpv-platform/./apps/admin/src/app/users/entities/user.entity.ts","webpack://cbpv-platform/./apps/admin/src/app/users/users.controller.ts","webpack://cbpv-platform/./apps/admin/src/app/users/users.module.ts","webpack://cbpv-platform/./apps/admin/src/app/users/users.service.ts","webpack://cbpv-platform/external commonjs \"@casl/ability\"","webpack://cbpv-platform/external commonjs \"@casl/ability/extra\"","webpack://cbpv-platform/external commonjs \"@nestjs/axios\"","webpack://cbpv-platform/external commonjs \"@nestjs/common\"","webpack://cbpv-platform/external commonjs \"@nestjs/config\"","webpack://cbpv-platform/external commonjs \"@nestjs/core\"","webpack://cbpv-platform/external commonjs \"@nestjs/jwt\"","webpack://cbpv-platform/external commonjs \"@nestjs/passport\"","webpack://cbpv-platform/external commonjs \"@nestjs/swagger\"","webpack://cbpv-platform/external commonjs \"@nestjs/typeorm\"","webpack://cbpv-platform/external commonjs \"bcrypt\"","webpack://cbpv-platform/external commonjs \"class-transformer\"","webpack://cbpv-platform/external commonjs \"class-validator\"","webpack://cbpv-platform/external commonjs \"dotenv\"","webpack://cbpv-platform/external commonjs \"js-yaml\"","webpack://cbpv-platform/external commonjs \"passport-google-oauth20\"","webpack://cbpv-platform/external commonjs \"passport-jwt\"","webpack://cbpv-platform/external commonjs \"passport-local\"","webpack://cbpv-platform/external commonjs \"request-context\"","webpack://cbpv-platform/external commonjs \"rxjs\"","webpack://cbpv-platform/external commonjs \"tslib\"","webpack://cbpv-platform/external commonjs \"typeorm\"","webpack://cbpv-platform/external node-commonjs \"fs\"","webpack://cbpv-platform/webpack/bootstrap","webpack://cbpv-platform/webpack/runtime/hasOwnProperty shorthand","webpack://cbpv-platform/./apps/admin/src/main.ts"],"sourcesContent":["var map = {\n\t\"./1640532247325-skills-seed.ts\": \"./apps/admin/src/app/migration/1640532247325-skills-seed.ts\",\n\t\"./1640548061457-countries-seed.ts\": \"./apps/admin/src/app/migration/1640548061457-countries-seed.ts\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./apps/admin/src/app/migration sync recursive \\\\.ts$\";","import { Module } from '@nestjs/common';\nimport { SkillsModule } from './skills/skills.module';\nimport { getConnectionOptions } from 'typeorm';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CountriesModule } from './countries/countries.module';\nimport { UsersModule } from './users/users.module';\nimport { APP_FILTER, APP_GUARD } from '@nestjs/core';\nimport { GlobalExceptionFilter } from './common/global-exception-filter';\nimport { AuthModule } from './auth/auth.module';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { IamModule } from './iam/iam.module';\n\n/**\n * To solve single file build artifact issue for nx, for running Typeorm migrations.\n * Solution copied from : https://github.com/typeorm/typeorm/issues/5458#issuecomment-770453233\n */\nconst contexts = (require as any).context('./migration/', true, /\\.ts$/);\nconst migrations = contexts.keys()\n  .map(modulePath => contexts(modulePath))\n  .reduce((result, migrationModule) => {\n    return Object.assign(result, migrationModule);\n  });\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    TypeOrmModule.forRootAsync({\n      useFactory: async () => {\n        // for production, we have a remote database\n        if (process.env.DATABASE_URL) {\n          return {\n            url: process.env.DATABASE_URL,\n            type: 'postgres',\n            synchronize: true,\n            extra: { ssl: { rejectUnauthorized: false } },\n            autoLoadEntities: true,\n            migrationsRun: true,\n            migrations: Object.values(migrations)\n          };\n        }\n        return Object.assign(await getConnectionOptions(), {\n          autoLoadEntities: true,\n          migrationsRun: true,\n          migrations: Object.values(migrations)\n        });\n      },\n    }),\n    SkillsModule,\n    CountriesModule,\n    AuthModule,\n    UsersModule,\n    IamModule,\n  ],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: GlobalExceptionFilter,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n","import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Request,\n  Response,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { LocalAuthGuard } from './local-auth-guard';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { Public } from './public.decorator';\nimport { AuthGuard } from '@nestjs/passport';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Login with username and password. A JWT is returned in response which can be used to make further API calls.\n   */\n  @Public()\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async login(@Body() loginDto: LoginDto, @Request() req) {\n    return this.authService.login(req.user);\n  }\n\n  /**\n   * Login with a token. Token must be set as authorization header. If the request succeeds, the token is valid.\n   */\n  @ApiBearerAuth()\n  @Post('loginWithToken')\n  async loginWithToken() {}\n\n  /**\n   * This endpoint is just to enable Single Sign on with Google.\n   */\n  @Public()\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async googleAuth(@Request() req) {}\n\n  /**\n   * After signing in with Google, the Google redirects to this endpoint along with user profile details (Google id, firstName, lastName etc).\n   * If the User is already available in the system (matched by its Google id, it is logged in by issuing a JWT).\n   * If the User is not available in the system (matched by its Google id), it is redirected to the registration page.\n   */\n  @Public()\n  @Get('google/redirect')\n  @UseGuards(AuthGuard('google'))\n  googleAuthRedirect(@Request() req, @Response() res) {\n    return this.authService.googleLogin(req, res);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { LocalStrategy } from './local.strategy';\nimport { AuthController } from './auth.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { jwtConstants } from './constants';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\nimport { GoogleStrategy } from './google.strategy';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule,\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: jwtConstants.expiresIn },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, GoogleStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n","import { BadRequestException, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { LoginResponseDto } from './dto/login-response.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private configService: ConfigService,\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async validateUser(username: string, pass: string) {\n    const user = await this.usersService.findByUsername(username);\n    if (user) {\n      const matched = await bcrypt.compare(pass, user.passwordHash);\n      if (matched) {\n        delete user.passwordHash;\n        return user;\n      }\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    const payload = {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      sub: user.id,\n      roles: user.roles,\n    };\n    const response = new LoginResponseDto();\n    response.accessToken = this.jwtService.sign(payload);\n    return response;\n  }\n\n  async googleLogin(req: any, res: any) {\n    if (!req.user) {\n      throw new BadRequestException();\n    }\n    // check if user already exist in database\n    const user = await this.usersService.findOneBy({\n      where: {\n        googleId: req.user.googleId,\n      },\n    });\n    const webAppUrl = this.configService.get<string>('WEB_APP_URL');\n    if (user) {\n      // user is already registered\n      const login = await this.login(user);\n      res.redirect(\n        `${webAppUrl}/access/login?accessToken=${login.accessToken}`,\n      );\n      return;\n    }\n    // User does not exist in the database, it needs to proceed with completing registration\n    res.redirect(\n      `${webAppUrl}/access/register?googleId=${req.user.googleId}&firstName=${req.user.firstName}&lastName=${req.user.lastName}`,\n    );\n  }\n}\n","export const jwtConstants = {\n  secret: 'F767D0B3082AECF1DF9DA87302749FE958277E1B77356D6AB75398BAEAFB3A56',\n  expiresIn: '60d',\n};\n","import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginResponseDto {\n  @IsString()\n  @IsNotEmpty()\n  accessToken: string;\n}\n","import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n","import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { config } from 'dotenv';\n\nimport { Injectable } from '@nestjs/common';\n\nconfig();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: `${process.env.ADMIN_API_URL}/auth/google/redirect`,\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise<any> {\n    const { name, emails, photos } = profile;\n    const user = {\n      googleId: profile.id,\n      firstName: profile.name?.givenName,\n      lastName: profile.name?.familyName,\n      accessToken,\n    };\n    return user;\n  }\n}\n","import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\nimport { IS_PUBLIC_KEY } from './public.decorator';\nimport * as contextService from 'request-context';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /**\n   * Override to return true for public routes which don't need authentication\n   */\n  canActivate(context: ExecutionContext) {\n    const request = context.switchToHttp().getRequest();\n    contextService.set('request', request);\n\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n","import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\nimport * as contextService from 'request-context';\nimport { defineAbilityFor } from '../iam/policy';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    const user = {\n      id: payload.sub,\n      firstName: payload.firstName,\n      lastName: payload.lastName,\n      roles: payload.roles,\n    };\n    contextService.set('user', user);\n    contextService.set(\n      'userAbility',\n      defineAbilityFor(contextService.get('user')),\n    );\n    return user;\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n","/**\n * Based on the example and solution from nestjs documentation\n * https://docs.nestjs.com/security/authentication\n * The solution is copied and modified as per our requirement.\n */\nimport { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string) {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n","import { SetMetadata } from '@nestjs/common';\n\n// For public routes i.e the routes which don't need authentication\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n","// Based on a motivation and solution form:\n// https://docs.nestjs.com/exception-filters#throwing-standard-exceptions\n// https://stackoverflow.com/questions/58993405/how-can-i-handle-typeorm-error-in-nestjs\nimport {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n  UpdateValuesMissingError,\n} from 'typeorm';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { ForbiddenError } from '@casl/ability';\n\n/**\n * Catch unhandled exceptions and return proper Http response code\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\n  catch(exception: unknown, host: ArgumentsHost) {\n    const { httpAdapter } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest<Request>();\n    let message = (exception as any).message.message;\n\n    Logger.error(\n      message,\n      (exception as any).stack,\n      `${request.method} ${request.url}`,\n    );\n    let httpStatus;\n    let responseBody;\n    switch (exception.constructor) {\n      case ForbiddenError:\n        httpStatus = HttpStatus.FORBIDDEN;\n        message = (exception as HttpException).message;\n        break;\n      case QueryFailedError: // TypeOrm error\n        httpStatus = HttpStatus.UNPROCESSABLE_ENTITY;\n        message = (exception as QueryFailedError).message;\n        break;\n      case EntityNotFoundError: // TypeOrm error\n        httpStatus = HttpStatus.NOT_FOUND;\n        message = (exception as EntityNotFoundError).message;\n        break;\n      case CannotCreateEntityIdMapError: // TypeOrm error\n        httpStatus = HttpStatus.UNPROCESSABLE_ENTITY;\n        message = (exception as CannotCreateEntityIdMapError).message;\n        break;\n      case UpdateValuesMissingError: // Typeorm error\n        httpStatus = HttpStatus.UNPROCESSABLE_ENTITY;\n        message = (exception as UpdateValuesMissingError).message;\n        break;\n      default:\n        const httpException = exception as HttpException;\n        if (httpException.getResponse) {\n          responseBody = (exception as HttpException).getResponse();\n          httpStatus = httpException.getStatus();\n        } else {\n          httpStatus = HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n        if (!message) {\n          message = 'Internal Server Error';\n        }\n    }\n\n    if (!responseBody) {\n      responseBody = {\n        statusCode: httpStatus,\n        message,\n      };\n    }\n\n    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n  }\n}\n","import { Controller, Get } from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Public } from '../auth/public.decorator';\n\n@ApiTags('countries')\n@Controller('countries')\nexport class CountriesController {\n  constructor(private readonly countriesService: CountriesService) {}\n\n  /**\n   * Get a list of all possible Countries in the System.\n   */\n  @Get()\n  @Public()\n  findAll() {\n    return this.countriesService.findAll();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { CountriesController } from './countries.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Country } from './entities/country.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Country])],\n  controllers: [CountriesController],\n  providers: [CountriesService],\n})\nexport class CountriesModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Country } from './entities/country.entity';\n\n@Injectable()\nexport class CountriesService {\n  constructor(\n    @InjectRepository(Country)\n    private countryRepository: Repository<Country>,\n  ) {}\n\n  findAll() {\n    return this.countryRepository.find();\n  }\n}\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Country {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  code: string;\n}\n","import { getConnection } from 'typeorm';\nimport * as yaml from 'js-yaml';\nimport * as fs from 'fs';\n\n/**\n * Insert a yaml file into database\n * @param fileName the name of the file in src/data\n */\nexport async function yamlToDatabase(fileName: string) {\n  let records: any[] = [];\n  let tableName: string;\n  try {\n    records = yaml.load(fs.readFileSync(`apps/admin/src/app/data/${fileName}`, 'utf8'));\n    tableName = fileName.substring(0, fileName.indexOf('.yaml'));\n  } catch (err) {\n    console.log('error reading the yaml file', err);\n  }\n  if (!records || !tableName) {\n    return;\n  }\n  const connection = getConnection();\n  const data = [];\n  records.forEach((record) => {\n    data.push(record);\n  });\n  if (data.length > 1) {\n    await connection\n      .createQueryBuilder()\n      .insert()\n      .into(tableName)\n      .values(data)\n      .orUpdate({\n        conflict_target: ['id'],\n        overwrite: Object.keys(data[0]),\n      })\n      .execute();\n  }\n}\n","import { Controller, Get } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiExtraModels,\n  ApiProperty,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { IamService } from './iam.service';\nimport { Action as ActionEnum } from './policy';\n\nclass Action {\n  @ApiProperty({\n    type: 'enum',\n    enum: ActionEnum,\n  })\n  action: ActionEnum;\n}\n\n@ApiTags('IAM')\n@ApiExtraModels(Action)\n@Controller('iam')\nexport class IamController {\n  constructor(private readonly iamService: IamService) {}\n  /**\n   * Get permissions of the calling user.\n   */\n  @ApiBearerAuth()\n  @Get('getPermissions')\n  getPermissions() {\n    return this.iamService.getPermissions();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { IamController } from './iam.controller';\nimport { IamService } from './iam.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [HttpModule, ConfigModule],\n  controllers: [IamController],\n  providers: [IamService],\n})\nexport class IamModule {}\n","import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { firstValueFrom } from 'rxjs';\nimport { HttpService } from '@nestjs/axios';\nimport * as contextService from 'request-context';\nimport { packRules } from '@casl/ability/extra';\n\n@Injectable()\nexport class IamService {\n  constructor(\n    private httpService: HttpService,\n    private configService: ConfigService,\n  ) {}\n\n  async getPermissions() {\n    const taskServicePermissions =\n      await this.getUserPermissionsFromTaskService();\n\n    return packRules(\n      contextService.get('userAbility')?.rules,\n      (subjectType: any) => {\n        if (typeof subjectType === 'string') {\n          return subjectType;\n        }\n        return subjectType.name;\n      },\n    ).concat(taskServicePermissions);\n  }\n\n  /**\n   * Get a user from admin service\n   * @param id the uuid for the user\n   */\n  async getUserPermissionsFromTaskService() {\n    const taskApi = this.configService.get<string>('TASK_API');\n    if (!taskApi) {\n      throw new HttpException(\n        {\n          status: HttpStatus.SERVICE_UNAVAILABLE,\n          error: 'Task service url not found.',\n        },\n        HttpStatus.SERVICE_UNAVAILABLE,\n      );\n    }\n    try {\n      const response = await firstValueFrom(\n        this.httpService.get(`${taskApi}/iam/getPermissions`, {\n          headers: getAuthorizationHeader(),\n        }),\n      );\n      return response.data;\n    } catch (err) {\n      Logger.error(`failed to permissions from Task service ${err}`);\n      throw new HttpException(\n        {\n          error: err?.message,\n        },\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      );\n    }\n  }\n}\n\nexport function getAuthorizationHeader() {\n  return {\n    Authorization: contextService.get('request').header('Authorization'),\n  };\n}\n","import {\n  Ability,\n  AbilityClass,\n  AbilityBuilder,\n  InferSubjects,\n  ExtractSubjectType,\n} from '@casl/ability';\nimport { Role, User } from '../users/entities/user.entity';\n\n/**\n * Defines the policy for a User.\n * The policy includes the actions a User can perform on entities.\n */\nexport enum Action {\n  Manage = 'manage',\n  Create = 'create',\n  Read = 'read',\n  Update = 'update',\n  Delete = 'delete',\n}\n\ntype Subjects = InferSubjects<typeof User> | 'all';\n\ntype AppAbilities = [Action, Subjects];\nexport type AppAbility = Ability<AppAbilities>;\nexport const AppAbility = Ability as AbilityClass<AppAbility>;\n\ntype DefinePermissions = (\n  user: User,\n  builder: AbilityBuilder<AppAbility>,\n) => void;\n\n// For each role, define the permissions\nconst rolePermissions: Record<Role, DefinePermissions> = {\n  admin(user, { can }) {\n    can(Action.Manage, 'all');\n  },\n  developer(user, { can }) {\n    can([Action.Update, Action.Read], User, { id: user.id });\n  },\n  crowdworker(user, { can }) {\n    can([Action.Update, Action.Read], User, { id: user.id });\n  },\n};\n\nexport function defineAbilityFor(user: User): AppAbility {\n  const builder = new AbilityBuilder(AppAbility);\n\n  user.roles.forEach((role) => {\n    if (typeof rolePermissions[role] === 'function') {\n      rolePermissions[role](user, builder);\n    } else {\n      throw new Error(`Trying to use unknown role \"${role}\"`);\n    }\n  });\n\n  return builder.build({\n    detectSubjectType: (item) =>\n      item.constructor as ExtractSubjectType<Subjects>,\n  });\n}\n","import { MigrationInterface, QueryRunner } from 'typeorm';\nimport { yamlToDatabase } from '../data/yaml-to-database';\n\nexport class skillsSeed1640532247325 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    return yamlToDatabase('skill.yaml');\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    console.log('reverting of migration not implemented');\n  }\n}\n","import { MigrationInterface, QueryRunner } from 'typeorm';\nimport { yamlToDatabase } from '../data/yaml-to-database';\n\nexport class countrySeed1640548061457 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    return yamlToDatabase('country.yaml');\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    console.log('reverting of migration not implemented');\n  }\n}\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Skill {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n}\n","import { Controller, Get } from '@nestjs/common';\nimport { SkillsService } from './skills.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Public } from '../auth/public.decorator';\n\n@ApiTags('skills')\n@Controller('skills')\nexport class SkillsController {\n  constructor(private readonly skillsService: SkillsService) {}\n\n  /**\n   * Get a list of all possible skills in the System.\n   */\n  @Get()\n  @Public()\n  findAll() {\n    return this.skillsService.findAll();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { SkillsService } from './skills.service';\nimport { SkillsController } from './skills.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Skill } from './entities/skill.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Skill])],\n  controllers: [SkillsController],\n  providers: [SkillsService],\n})\nexport class SkillsModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In, Repository } from 'typeorm';\nimport { Skill } from './entities/skill.entity';\n\n@Injectable()\nexport class SkillsService {\n  // temporarily return just these skills for evaluation\n  whitelistskills = [\n    'afe60a49-92f7-4ae8-9c69-0035ac4c2b6e',\n    '1fe74128-2d68-4414-b9b9-c7fdf5189267',\n    'a00b0213-30e7-4ee2-b14c-7e5c889d9e0b',\n    'd5795f2c-5369-4b67-9513-372cd53af0e6',\n    '634dce96-8c20-4642-b56e-8225c34ead3b',\n  ];\n  constructor(\n    @InjectRepository(Skill)\n    private skillRepository: Repository<Skill>,\n  ) {}\n\n  findAll() {\n    return this.skillRepository.find({\n      where: {\n        id: In(this.whitelistskills),\n      },\n    });\n  }\n}\n","import { ArrayNotEmpty, IsArray, IsNotEmpty, IsUUID } from 'class-validator';\n\nexport class BatchGetUserInfoDto {\n  @IsArray()\n  @IsUUID('all', { each: true })\n  @IsNotEmpty()\n  @ArrayNotEmpty()\n  ids: string[];\n}\n","import {\n  ArrayNotEmpty,\n  IsArray,\n  IsDateString,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUUID,\n  Matches,\n  Min,\n} from 'class-validator';\nimport { Gender, Role } from '../entities/user.entity';\n\n/**\n * Password regex rules:\n * at-least one digit\n * at-lest one lower and upper case character\n * At-least 8 characters\n */\nconst PASSWORD_REGEX =\n  /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#\\$%\\^\\&*\\)\\(+=._-]{8,}$/;\nconst PASSWORD_REGX_MSG =\n  'Password should be at-least 8 characters long, must contain one lower case and one upper case letter, and one digit.';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(PASSWORD_REGEX, { message: PASSWORD_REGX_MSG })\n  password: string;\n\n  @IsDateString()\n  @IsOptional()\n  birthDate?: Date;\n\n  @IsEnum(Gender)\n  @IsOptional()\n  gender?: Gender;\n\n  @IsInt()\n  @IsOptional()\n  @Min(0)\n  experience?: number;\n\n  @IsArray()\n  @IsEnum(Role, { each: true })\n  @IsNotEmpty()\n  roles: Role[];\n\n  @IsUUID()\n  @IsOptional()\n  country?: string;\n\n  @IsArray()\n  @IsUUID('all', { each: true })\n  @IsNotEmpty()\n  @ArrayNotEmpty()\n  skills: string[];\n}\n","import { OmitType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\nimport { IsEnum, IsNotEmpty, IsString } from 'class-validator';\n\nexport enum SSOProvider {\n  Google = 'google',\n  Apple = 'apple',\n}\nexport class CreateWithSSODto extends OmitType(CreateUserDto, [\n  'username',\n  'password',\n] as const) {\n  @IsString()\n  @IsNotEmpty()\n  ssoProfileId: string;\n\n  @IsEnum(SSOProvider)\n  @IsNotEmpty()\n  ssoProvider: SSOProvider;\n}\n","import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Skill } from '../../skills/entities/skill.entity';\nimport { Country } from '../../countries/entities/country.entity';\nimport { Min } from 'class-validator';\nimport { Exclude } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport enum Role {\n  Admin = 'admin',\n  Developer = 'developer',\n  Crowdworker = 'crowdworker',\n}\n\nexport enum Gender {\n  Male = 'male',\n  Female = 'female',\n}\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true, nullable: true })\n  googleId: string;\n\n  @CreateDateColumn({ type: 'timestamp with time zone' })\n  dateCreated: Date;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @Column({ unique: true, nullable: true })\n  username: string;\n\n  @Column({ nullable: true })\n  @ApiProperty({\n    required: false,\n  })\n  @Exclude()\n  passwordHash: string;\n\n  @Column({ type: 'date', nullable: true })\n  birthDate: Date;\n\n  @Column({ type: 'enum', enum: Gender, nullable: true })\n  gender: Gender;\n\n  @Min(0)\n  @Column({ nullable: true })\n  experience: number;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    array: true,\n  })\n  roles: Role[];\n\n  @ManyToOne(() => Country, { eager: true })\n  country: Country;\n\n  @ManyToMany(() => Skill, {\n    eager: true,\n    cascade: true,\n    onDelete: 'CASCADE',\n    onUpdate: 'CASCADE',\n  })\n  @JoinTable()\n  skills: Skill[];\n\n  public constructor(init?: Partial<User>) {\n    Object.assign(this, init);\n  }\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { Public } from '../auth/public.decorator';\nimport { Action } from '../iam/policy';\nimport { ForbiddenError } from '@casl/ability';\nimport * as contextService from 'request-context';\nimport { User } from './entities/user.entity';\nimport { CreateWithSSODto } from './dto/create-with-sso.dto';\nimport { BatchGetUserInfoDto } from './dto/batch-get-user-info.dto';\n\n@UseInterceptors(ClassSerializerInterceptor)\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Create a new user with username and password.\n   */\n  @Public()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Create a new user with single sign on provider profile id. In this case username and password is not required.\n   */\n  @Public()\n  @Post('createWithSSO')\n  createWithSSO(@Body() createWithSSODto: CreateWithSSODto) {\n    return this.usersService.createWithSSO(createWithSSODto);\n  }\n\n  /**\n   * Get all the Users in the System. The calling user must have Read permission for all Users.\n   */\n  @ApiBearerAuth()\n  @Get()\n  findAll() {\n    // check permissions first\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Read,\n      new User(),\n    ); // if user can read empty user, it can read any user\n\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Get a User by ID. The calling user must have Read permission for the User.\n   */\n  @ApiBearerAuth()\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    // check permissions\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Read,\n      new User({ id }),\n    );\n    return this.usersService.findOne(id);\n  }\n\n  /**\n   * Batch get User info e.g name.\n   * The calling user must have Read permission for the Users.\n   */\n  @ApiBearerAuth()\n  @Post('batchGetInfo')\n  batchGetInfo(@Body() batchGetUserInfo: BatchGetUserInfoDto) {\n    // check permissions\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Read,\n      User,\n    );\n    return this.usersService.batchGetInfo(batchGetUserInfo);\n  }\n\n  /**\n   * Update a user. The calling user must have Update permission for the User.\n   */\n  @ApiBearerAuth()\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    // check permissions\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Update,\n      new User({ id }),\n    );\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  /**\n   * Delete a user. The calling user must have Delete permission for the User.\n   */\n  @ApiBearerAuth()\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    // check permissions\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Delete,\n      new User({ id }),\n    );\n    return this.usersService.remove(id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { classToPlain, plainToClass } from 'class-transformer';\nimport { User } from './entities/user.entity';\nimport { Skill } from '../skills/entities/skill.entity';\nimport { Country } from '../countries/entities/country.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, FindOneOptions, Repository } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { CreateWithSSODto, SSOProvider } from './dto/create-with-sso.dto';\nimport { BatchGetUserInfoDto } from './dto/batch-get-user-info.dto';\nimport * as contextService from 'request-context';\nimport { Action, AppAbility } from '../iam/policy';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository<User>,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const user = userDtoToEntity(createUserDto);\n    // Check if username is available\n    const existingUser = await this.userRepository.findOne({\n      select: ['id'],\n      where: { username: user.username },\n    });\n    if (existingUser) {\n      throw new HttpException(\n        {\n          status: HttpStatus.PRECONDITION_FAILED,\n          error:\n            'This username is not available. Please select a different one.',\n        },\n        HttpStatus.PRECONDITION_FAILED,\n      );\n    }\n    if (createUserDto.skills) {\n      // add skills relationship\n      user.skills = createUserDto.skills.map((id) => <Skill>{ id });\n    }\n    if (createUserDto.country) {\n      // add country relationship\n      user.country = <Country>{ id: createUserDto.country };\n    }\n    // hash password\n    user.passwordHash = await bcrypt.hash(\n      createUserDto.password,\n      await bcrypt.genSalt(),\n    );\n    const savedUser = await this.userRepository.save(user);\n    // re-retrieve the user here so that password is removed from savedUser which was added to it when converting dto to entity\n    return this.userRepository.findOne(savedUser.id);\n  }\n\n  async createWithSSO(createWithSSODto: CreateWithSSODto) {\n    const user = userDtoToEntity(createWithSSODto);\n    if (createWithSSODto.skills) {\n      // add skills relationship\n      user.skills = createWithSSODto.skills.map((id) => <Skill>{ id });\n    }\n    if (createWithSSODto.country) {\n      // add country relationship\n      user.country = <Country>{ id: createWithSSODto.country };\n    }\n    if (createWithSSODto.ssoProvider === SSOProvider.Google) {\n      user.googleId = createWithSSODto.ssoProfileId;\n    }\n    const savedUser = await this.userRepository.save(user);\n    return this.userRepository.findOne(savedUser.id);\n  }\n\n  findAll() {\n    return this.userRepository.find();\n  }\n\n  findOne(id: string) {\n    return this.userRepository.findOneOrFail(id);\n  }\n\n  findByUsername(username: string) {\n    return this.userRepository.findOne({\n      where: {\n        username,\n      },\n    });\n  }\n\n  findOneBy(options: FindOneOptions<User>) {\n    return this.userRepository.findOne(options);\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    // first check if the record exist in database because we use .save here and\n    // save will create new if it not exists, but we don't want to create new here\n    // as this is an update call.\n    await this.userRepository.findOneOrFail(id, {\n      select: ['id'],\n    });\n\n    const user = userDtoToEntity(updateUserDto);\n    if (updateUserDto.skills) {\n      // update skills relationship\n      user.skills = updateUserDto.skills.map((id) => <Skill>{ id });\n    }\n    if (updateUserDto.country) {\n      // update country relationship\n      user.country = <Country>{ id: updateUserDto.country };\n    }\n    if (updateUserDto.password) {\n      // hash password\n      user.passwordHash = await bcrypt.hash(\n        updateUserDto.password,\n        await bcrypt.genSalt(),\n      );\n    }\n    // using save instead of update here to also add/remove the relationships\n    user.id = id;\n    await this.userRepository.save(user);\n    return this.userRepository.findOne(id);\n  }\n\n  remove(id: string) {\n    return this.userRepository.delete(id);\n  }\n\n  batchGetInfo(batchGetUserInfo: BatchGetUserInfoDto) {\n    const cols: any = ['id', 'firstName', 'lastName'];\n\n    const ability = contextService.get('userAbility') as AppAbility;\n    if (ability.can(Action.Manage, new User())) {\n      cols.push('username');\n    }\n    return this.userRepository.findByIds(batchGetUserInfo.ids, {\n      select: cols,\n      loadEagerRelations: false,\n    });\n  }\n}\n\nfunction userDtoToEntity(\n  dto: CreateUserDto | UpdateUserDto | CreateWithSSODto,\n): User {\n  const data = classToPlain(dto);\n  return plainToClass(User, data);\n}\n","module.exports = require(\"@casl/ability\");","module.exports = require(\"@casl/ability/extra\");","module.exports = require(\"@nestjs/axios\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"bcrypt\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"dotenv\");","module.exports = require(\"js-yaml\");","module.exports = require(\"passport-google-oauth20\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"request-context\");","module.exports = require(\"rxjs\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app/app.module';\nimport { DocumentBuilder, OpenAPIObject, SwaggerModule } from '@nestjs/swagger';\nimport * as fs from 'fs';\nimport { ValidationPipe } from '@nestjs/common';\nimport * as contextService from 'request-context';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.enableCors();\n  // Swagger\n  const config = new DocumentBuilder()\n    .setTitle('Admin')\n    .setDescription(\n      'Admin service is responsible for User management and authentication. Also it provides static data i.e list of Skills and Countries ',\n    )\n    .setVersion('1.0')\n    .addBearerAuth({\n      description: 'Authentication is done by a signed JWT',\n      name: 'Authorization',\n      bearerFormat: 'Bearer',\n      type: 'http',\n      in: 'Header',\n    })\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n\n  // save swagger spec file\n  saveSwaggerSpec(document);\n\n  // add global validation\n  app.useGlobalPipes(\n    new ValidationPipe({\n      transform: true,\n      forbidUnknownValues: true,\n    }),\n  );\n\n  // wrap requests in a middleware namespace 'request'.\n  // thi is done to attach data to request context e.g currently logged in user\n  app.use(contextService.middleware('request'));\n\n  const port = process.env.PORT || 3001;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}`\n  );\n}\n\nfunction saveSwaggerSpec(document: OpenAPIObject) {\n  const fileName = 'apps/admin/src/swagger/swagger.json';\n  try {\n    fs.writeFileSync(fileName, JSON.stringify(document));\n  } catch (error) {\n    console.error('Error in saving swagger file', fileName, error);\n  }\n}\n\n\nbootstrap();\n"],"names":[],"sourceRoot":""}