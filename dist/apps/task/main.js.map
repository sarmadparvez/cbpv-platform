{"version":3,"file":"main.js","mappings":"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","sources":["webpack://cbpv-platform/./apps/task/src/app/app.module.ts","webpack://cbpv-platform/./apps/task/src/app/auth/auth.module.ts","webpack://cbpv-platform/./apps/task/src/app/auth/constants.ts","webpack://cbpv-platform/./apps/task/src/app/auth/jwt-auth.guard.ts","webpack://cbpv-platform/./apps/task/src/app/auth/jwt.strategy.ts","webpack://cbpv-platform/./apps/task/src/app/common/global-exception-filter.ts","webpack://cbpv-platform/./apps/task/src/app/config/cloudinary.ts","webpack://cbpv-platform/./apps/task/src/app/countries/countries.module.ts","webpack://cbpv-platform/./apps/task/src/app/countries/countries.service.ts","webpack://cbpv-platform/./apps/task/src/app/countries/entities/country.entity.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/dto/create-feedback.dto.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/dto/findAll-feedback.dto.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/dto/rate-feedback.dto.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/dto/rate-task.dto.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/dto/update-feedback.dto.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/entities/answer.entity.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/entities/feedback.entity.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/feedbacks.controller.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/feedbacks.module.ts","webpack://cbpv-platform/./apps/task/src/app/feedbacks/feedbacks.service.ts","webpack://cbpv-platform/./apps/task/src/app/iam/iam.controller.ts","webpack://cbpv-platform/./apps/task/src/app/iam/iam.module.ts","webpack://cbpv-platform/./apps/task/src/app/iam/policy.ts","webpack://cbpv-platform/./apps/task/src/app/iam/utils.ts","webpack://cbpv-platform/./apps/task/src/app/projects/dto/create-project.dto.ts","webpack://cbpv-platform/./apps/task/src/app/projects/dto/update-project.dto.ts","webpack://cbpv-platform/./apps/task/src/app/projects/entities/project.entity.ts","webpack://cbpv-platform/./apps/task/src/app/projects/projects.controller.ts","webpack://cbpv-platform/./apps/task/src/app/projects/projects.module.ts","webpack://cbpv-platform/./apps/task/src/app/projects/projects.service.ts","webpack://cbpv-platform/./apps/task/src/app/skills/entities/skill.entity.ts","webpack://cbpv-platform/./apps/task/src/app/skills/skills.module.ts","webpack://cbpv-platform/./apps/task/src/app/skills/skills.service.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/dto/batch-create-images.dto.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/dto/create-task.dto.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/dto/feedback-stats-response.dto.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/dto/file-upload-signature-response.dto.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/dto/find-all-tasks.dto.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/dto/update-task.dto.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/entities/image.entity.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/entities/question.entity.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/entities/task.entity.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/tasks.controller.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/tasks.module.ts","webpack://cbpv-platform/./apps/task/src/app/tasks/tasks.service.ts","webpack://cbpv-platform/./apps/task/src/app/users/users.module.ts","webpack://cbpv-platform/./apps/task/src/app/users/users.service.ts","webpack://cbpv-platform/external commonjs \"@casl/ability\"","webpack://cbpv-platform/external commonjs \"@casl/ability/extra\"","webpack://cbpv-platform/external commonjs \"@nestjs/axios\"","webpack://cbpv-platform/external commonjs \"@nestjs/common\"","webpack://cbpv-platform/external commonjs \"@nestjs/config\"","webpack://cbpv-platform/external commonjs \"@nestjs/core\"","webpack://cbpv-platform/external commonjs \"@nestjs/jwt\"","webpack://cbpv-platform/external commonjs \"@nestjs/mapped-types\"","webpack://cbpv-platform/external commonjs \"@nestjs/passport\"","webpack://cbpv-platform/external commonjs \"@nestjs/schedule\"","webpack://cbpv-platform/external commonjs \"@nestjs/swagger\"","webpack://cbpv-platform/external commonjs \"@nestjs/typeorm\"","webpack://cbpv-platform/external commonjs \"class-transformer\"","webpack://cbpv-platform/external commonjs \"class-validator\"","webpack://cbpv-platform/external commonjs \"cloudinary\"","webpack://cbpv-platform/external commonjs \"passport-jwt\"","webpack://cbpv-platform/external commonjs \"request-context\"","webpack://cbpv-platform/external commonjs \"rxjs\"","webpack://cbpv-platform/external commonjs \"tslib\"","webpack://cbpv-platform/external commonjs \"typeorm\"","webpack://cbpv-platform/external node-commonjs \"fs\"","webpack://cbpv-platform/webpack/bootstrap","webpack://cbpv-platform/./apps/task/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ProjectsModule } from './projects/projects.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { getConnectionOptions } from 'typeorm';\nimport { GlobalExceptionFilter } from './common/global-exception-filter';\nimport { APP_FILTER, APP_GUARD } from '@nestjs/core';\nimport { TasksModule } from './tasks/tasks.module';\nimport { SkillsModule } from './skills/skills.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { CountriesModule } from './countries/countries.module';\nimport { FeedbacksModule } from './feedbacks/feedbacks.module';\nimport cloudinary from './config/cloudinary';\nimport { AuthModule } from './auth/auth.module';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { UsersModule } from './users/users.module';\nimport { IamModule } from './iam/iam.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ load: [cloudinary] }),\n    TypeOrmModule.forRootAsync({\n      useFactory: async () => {\n        // for production, we have a remote database\n        if (process.env.DATABASE_URL) {\n          return {\n            url: process.env.DATABASE_URL,\n            type: 'postgres',\n            synchronize: true,\n            extra: { ssl: { rejectUnauthorized: false } },\n            autoLoadEntities: true,\n          };\n        }\n        return Object.assign(await getConnectionOptions(), {\n          autoLoadEntities: true,\n        });\n      },\n    }),\n    ScheduleModule.forRoot(),\n    AuthModule,\n    ProjectsModule,\n    TasksModule,\n    SkillsModule,\n    CountriesModule,\n    FeedbacksModule,\n    UsersModule,\n    IamModule,\n  ],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: GlobalExceptionFilter,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n","import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { jwtConstants } from './constants';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n    }),\n  ],\n  providers: [JwtStrategy],\n})\nexport class AuthModule {}\n","export const jwtConstants = {\n  secret: 'F767D0B3082AECF1DF9DA87302749FE958277E1B77356D6AB75398BAEAFB3A56',\n};\n","import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\nimport * as contextService from 'request-context';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   * Override to set request in the contextService to make it available throughout thea app.\n   * @param context\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const request = context.switchToHttp().getRequest();\n    contextService.set('request', request);\n    return super.canActivate(context);\n  }\n}\n","import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\nimport * as contextService from 'request-context';\nimport { defineAbilityFor } from '../iam/policy';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    const user = {\n      id: payload.sub,\n      firstName: payload.firstName,\n      lastName: payload.lastName,\n      roles: payload.roles,\n    };\n    contextService.set('user', user);\n    contextService.set(\n      'userAbility',\n      defineAbilityFor(contextService.get('user')),\n    );\n    return user;\n  }\n}\n","// Based on a motivation and solution form:\n// https://docs.nestjs.com/exception-filters#throwing-standard-exceptions\n// https://stackoverflow.com/questions/58993405/how-can-i-handle-typeorm-error-in-nestjs\n// The solution is copied and modified as per our requirement.\nimport {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n  UpdateValuesMissingError,\n} from 'typeorm';\nimport { HttpAdapterHost } from '@nestjs/core';\nimport { ForbiddenError } from '@casl/ability';\n\n/**\n * Catch unhandled exceptions and return proper Http response code\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\n  catch(exception: unknown, host: ArgumentsHost) {\n    const { httpAdapter } = this.httpAdapterHost;\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest<Request>();\n    let message = (exception as any).message.message;\n\n    Logger.error(\n      message,\n      (exception as any).stack,\n      `${request.method} ${request.url}`,\n    );\n    let httpStatus;\n    let responseBody;\n    switch (exception.constructor) {\n      case ForbiddenError:\n        httpStatus = HttpStatus.FORBIDDEN;\n        message = (exception as HttpException).message;\n        break;\n      case QueryFailedError: // TypeOrm error\n        httpStatus = HttpStatus.UNPROCESSABLE_ENTITY;\n        message = (exception as QueryFailedError).message;\n        break;\n      case EntityNotFoundError: // TypeOrm error\n        httpStatus = HttpStatus.NOT_FOUND;\n        message = (exception as EntityNotFoundError).message;\n        break;\n      case CannotCreateEntityIdMapError: // TypeOrm error\n        httpStatus = HttpStatus.UNPROCESSABLE_ENTITY;\n        message = (exception as CannotCreateEntityIdMapError).message;\n        break;\n      case UpdateValuesMissingError: // Typeorm error\n        httpStatus = HttpStatus.UNPROCESSABLE_ENTITY;\n        message = (exception as UpdateValuesMissingError).message;\n        break;\n      default:\n        const httpException = exception as HttpException;\n        if (httpException.getResponse) {\n          responseBody = (exception as HttpException).getResponse();\n          httpStatus = httpException.getStatus();\n        } else {\n          httpStatus = HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n        if (!message) {\n          message = 'Internal Server Error';\n        }\n    }\n\n    if (!responseBody) {\n      responseBody = {\n        statusCode: httpStatus,\n        message,\n      };\n    }\n\n    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n  }\n}\n","// Cloudinary configuration https://cloudinary.com\n\nexport default () => ({\n  cloudinary: {\n    config: {\n      cloud_name: 'dtduup6h7',\n      api_key: '888317151932757',\n      api_secret: 'GmYo0sGpDKPaIMntFL3gqSPADAY',\n      secure: true,\n    },\n    apiUrl: 'https://api.cloudinary.com/v1_1/:cloud_name/:action',\n    imagesFolder: 'cbpv-platform/images',\n  },\n});\n","import { Module } from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Country } from './entities/country.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Country]), ConfigModule, HttpModule],\n  providers: [CountriesService],\n})\nexport class CountriesModule {}\n","import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Country } from './entities/country.entity';\nimport { Timeout } from '@nestjs/schedule';\nimport { firstValueFrom } from 'rxjs';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class CountriesService {\n  constructor(\n    private httpService: HttpService,\n    private configService: ConfigService,\n    @InjectRepository(Country)\n    private countryRepository: Repository<Country>,\n  ) {}\n\n  /**\n   * Fetching Countries from the Admin service and saving in database\n   * Called once whenever application runs. Saves Countries in database only if they are not already saved\n   * */\n  @Timeout(0)\n  async fetchAndSaveCountries() {\n    const country = await this.countryRepository.findOne();\n    if (country) {\n      Logger.debug('countries already available in database.');\n      return;\n    }\n    const adminAPI = this.configService.get<string>('ADMIN_API');\n    if (adminAPI) {\n      try {\n        const response = await firstValueFrom(\n          this.httpService.get<Country[]>(`${adminAPI}/countries`),\n        );\n        const countries = response.data;\n        this.countryRepository.save(countries);\n        Logger.debug('Countries saved in database');\n      } catch (err) {\n        Logger.error(`failed to fetch and save countries ${err}`);\n      }\n    }\n  }\n}\n","import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Country {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  code: string;\n}\n","import {\n  IsArray,\n  IsInt,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUUID,\n  Max,\n  Min,\n} from 'class-validator';\nimport { Answer } from '../entities/answer.entity';\n\nexport class CreateFeedbackDto {\n  @IsString()\n  @IsOptional()\n  comment?: string;\n\n  @IsUUID()\n  @IsNotEmpty()\n  taskId: string;\n\n  @IsArray()\n  answers: Answer[];\n\n  @IsInt()\n  @Min(1)\n  @Max(5)\n  @IsOptional()\n  taskRating?: number;\n\n  @IsString()\n  @IsOptional()\n  taskRatingComment?: string;\n}\n","import { IsOptional, IsUUID } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class FindAllFeedbackDto {\n  @IsUUID()\n  @IsOptional()\n  @ApiProperty({\n    description: 'The task to which the feedbacks belong.',\n    required: false,\n  })\n  taskId: string;\n}\n","import {\n  IsInt,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Max,\n  Min,\n} from 'class-validator';\n\nexport class RateFeedbackDto {\n  @IsInt()\n  @Min(1)\n  @Max(5)\n  @IsNotEmpty()\n  feedbackRating: number;\n\n  @IsString()\n  @IsOptional()\n  feedbackRatingComment?: string;\n}\n","import {\n  IsInt,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Max,\n  Min,\n} from 'class-validator';\n\nexport class RateTaskDto {\n  @IsInt()\n  @Min(1)\n  @Max(5)\n  @IsNotEmpty()\n  taskRating: number;\n\n  @IsString()\n  @IsOptional()\n  taskRatingComment?: string;\n}\n","import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreateFeedbackDto } from './create-feedback.dto';\n\nexport class UpdateFeedbackDto extends PartialType(\n  OmitType(CreateFeedbackDto, ['taskId'] as const),\n) {}\n","import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Max, Min } from 'class-validator';\nimport { Feedback } from './feedback.entity';\nimport { Question } from '../../tasks/entities/question.entity';\n\nexport enum ThumbsRating {\n  Up = 'up',\n  Down = 'down',\n}\n\n/**\n * An Answer belongs to a Feedback. Answers are created by /feedbacks POST and PATCH endpoints.\n */\n@Entity()\nexport class Answer {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'text', nullable: true })\n  textAnswer: string;\n\n  @Column({ nullable: true })\n  radioAnswer: string;\n\n  @Column({ nullable: true })\n  @Min(1)\n  @Max(5)\n  starRatingAnswer: number;\n\n  @Column({ type: 'enum', enum: ThumbsRating, nullable: true })\n  thumbsRatingAnswer: ThumbsRating;\n\n  @ManyToOne(() => Feedback, (feedback) => feedback.answers, {\n    onDelete: 'CASCADE',\n    orphanedRowAction: 'delete',\n  })\n  @JoinColumn({ name: 'feedbackId' })\n  feedbackId: string;\n\n  @Column('uuid')\n  @ManyToOne(() => Question)\n  @JoinColumn({ name: 'questionId' })\n  questionId: string;\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Task } from '../../tasks/entities/task.entity';\nimport { Answer } from './answer.entity';\nimport { Max, Min } from 'class-validator';\n\nexport enum PaymentStatus {\n  Pending = 'pending',\n  Completed = 'completed',\n}\n\n@Entity()\nexport class Feedback {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @CreateDateColumn({ type: 'timestamp with time zone' })\n  dateCreated: Date;\n\n  @Column({ type: 'text', nullable: true })\n  comment: string;\n\n  @Column({ type: 'enum', enum: PaymentStatus, default: PaymentStatus.Pending })\n  paymentStatus: PaymentStatus;\n\n  @Column({ nullable: true })\n  feedbackRating: number;\n\n  @Column({ type: 'text', nullable: true })\n  feedbackRatingComment: string;\n\n  @Column({ nullable: true })\n  taskRating: number;\n\n  @Column({ type: 'text', nullable: true })\n  taskRatingComment: string;\n\n  @Column('uuid')\n  @ManyToOne(() => Task)\n  @JoinColumn({ name: 'taskId' })\n  taskId: string;\n\n  @ManyToOne(() => Task, (task) => task.feedbacks)\n  task: Task;\n\n  @Column('uuid')\n  userId: string;\n\n  @OneToMany(() => Answer, (answer) => answer.feedbackId, {\n    cascade: true,\n    onDelete: 'CASCADE',\n    onUpdate: 'CASCADE',\n  })\n  answers: Answer[];\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  Put,\n} from '@nestjs/common';\nimport { FeedbacksService } from './feedbacks.service';\nimport { CreateFeedbackDto } from './dto/create-feedback.dto';\nimport { UpdateFeedbackDto } from './dto/update-feedback.dto';\nimport { ApiBearerAuth, ApiParam, ApiTags } from '@nestjs/swagger';\nimport { FindAllFeedbackDto } from './dto/findAll-feedback.dto';\nimport { ForbiddenError } from '@casl/ability';\nimport { Action } from '../iam/policy';\nimport { Feedback } from './entities/feedback.entity';\nimport * as contextService from 'request-context';\nimport { RateFeedbackDto } from './dto/rate-feedback.dto';\nimport { RateTaskDto } from './dto/rate-task.dto';\n\n@ApiTags('feedbacks')\n@Controller('feedbacks')\nexport class FeedbacksController {\n  constructor(private readonly feedbacksService: FeedbacksService) {}\n\n  /**\n   * Create a new Feedback. The user must have Create permission for Feedback.\n   */\n  @ApiBearerAuth()\n  @Post()\n  create(@Body() createFeedbackDto: CreateFeedbackDto) {\n    // check if user have permission to create Feedback\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Create,\n      Feedback,\n    );\n    return this.feedbacksService.create(createFeedbackDto);\n  }\n\n  /**\n   * Get a list of all Feedbacks. The user must have permission to Read all Feedbacks.\n   */\n  @ApiBearerAuth()\n  @Get()\n  findAll(@Query() query?: FindAllFeedbackDto) {\n    // check if user have permission to list Feedback\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Read,\n      new Feedback(),\n    );\n    return this.feedbacksService.findAll(query);\n  }\n\n  /**\n   * Get a list of Feedbacks on which the calling user have access to.\n   * The user must have Read permission on the Feedbacks.\n   */\n  @ApiBearerAuth()\n  @Get('search')\n  searchAll() {\n    // check if user have permission to read Feedbacks\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Read,\n      Feedback,\n    );\n    return this.feedbacksService.searchAll();\n  }\n\n  /**\n   * Get all Feedbacks for a Task. The user must have Read permission on the Task.\n   */\n  @ApiBearerAuth()\n  @Get('tasks/:taskId')\n  @ApiParam({\n    name: 'taskId',\n    description: 'The task id to list Feedbacks for',\n  })\n  findFeedbacks(@Param('taskId') taskId: string) {\n    return this.feedbacksService.findFeedbacks(taskId);\n  }\n\n  /**\n   * Get a Feedback.\n   * The calling user must have Read permission on the Feedback.\n   * The Read permission for the Feedback is granted if one of the following holds:\n   * 1. The feedback is created by the User.\n   * 2. User have Read permission on the Task to which this Feedback belongs.\n   */\n  @ApiBearerAuth()\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.feedbacksService.findOne(id);\n  }\n\n  /**\n   * Update a Feedback. The calling user must have Update permission on the Feedback.\n   */\n  @ApiBearerAuth()\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateFeedbackDto: UpdateFeedbackDto,\n  ) {\n    return this.feedbacksService.update(id, updateFeedbackDto);\n  }\n\n  /**\n   * Release payment for the Feedback. User must have Update Permission on the Task related to Feedback.\n   */\n  @ApiBearerAuth()\n  @Put(':id/releasePayment')\n  releasePayment(@Param('id') id: string) {\n    return this.feedbacksService.releasePayment(id);\n  }\n\n  /**\n   * Rate a feedback. User must have Update Permission on the Task related to Feedback.\n   */\n  @ApiBearerAuth()\n  @Patch(':id/rateFeedback')\n  rateFeedback(\n    @Param('id') id: string,\n    @Body() rateFeedbackDto: RateFeedbackDto,\n  ) {\n    return this.feedbacksService.rateFeedback(id, rateFeedbackDto);\n  }\n\n  /**\n   * Rate a Task related to feedback. User must have Read Permission on the Feedback.\n   */\n  @ApiBearerAuth()\n  @Patch(':id/rateTask')\n  rateTask(@Param('id') id: string, @Body() rateTaskDto: RateTaskDto) {\n    return this.feedbacksService.rateTask(id, rateTaskDto);\n  }\n\n  /**\n   * Delete a Feedback. The calling user must have Delete permission on the Feedback.\n   */\n  @ApiBearerAuth()\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.feedbacksService.remove(id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { FeedbacksService } from './feedbacks.service';\nimport { FeedbacksController } from './feedbacks.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Feedback } from './entities/feedback.entity';\nimport { Answer } from './entities/answer.entity';\nimport { Task } from '../tasks/entities/task.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Feedback, Answer, Task])],\n  controllers: [FeedbacksController],\n  providers: [FeedbacksService],\n})\nexport class FeedbacksModule {}\n","import { HttpException, HttpStatus, Injectable, Patch } from '@nestjs/common';\nimport { CreateFeedbackDto } from './dto/create-feedback.dto';\nimport { UpdateFeedbackDto } from './dto/update-feedback.dto';\nimport { classToPlain, plainToClass } from 'class-transformer';\nimport { Feedback, PaymentStatus } from './entities/feedback.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, Repository } from 'typeorm';\nimport { FindAllFeedbackDto } from './dto/findAll-feedback.dto';\nimport { findWithPermissionCheck } from '../iam/utils';\nimport { Action, AppAbility } from '../iam/policy';\nimport * as contextService from 'request-context';\nimport { Task } from '../tasks/entities/task.entity';\nimport { RateFeedbackDto } from './dto/rate-feedback.dto';\nimport { RateTaskDto } from './dto/rate-task.dto';\n\n@Injectable()\nexport class FeedbacksService {\n  constructor(\n    @InjectRepository(Feedback)\n    private feedbackRepository: Repository<Feedback>,\n    @InjectRepository(Task)\n    private taskRepository: Repository<Task>,\n  ) {}\n\n  async create(createFeedbackDto: CreateFeedbackDto) {\n    // Check if user have already provided feedback for this task, fail in that case.\n    // The feedback for a Task iteration can only be provided once.\n    const existingFeedback = await this.feedbackRepository.findOne({\n      where: {\n        taskId: createFeedbackDto.taskId,\n        userId: contextService.get('user').id,\n      },\n    });\n    if (existingFeedback) {\n      // user have already provided feedback for this Task\n      throw new HttpException(\n        {\n          status: HttpStatus.PRECONDITION_FAILED,\n          error: 'You have already provided feedback on this task.',\n        },\n        HttpStatus.PRECONDITION_FAILED,\n      );\n    }\n    // check if Answers belong to the questions of the Task\n    const task = await this.taskRepository.findOneOrFail(\n      createFeedbackDto.taskId,\n      {\n        select: ['id'],\n        relations: ['questions'],\n      },\n    );\n    const taskQuestionIds = task.questions.map((question) => question.id);\n    const allAnswersBelongToTaskQuesitons = createFeedbackDto.answers.every(\n      (answer) => taskQuestionIds.includes(answer.questionId),\n    );\n\n    if (!allAnswersBelongToTaskQuesitons) {\n      // There exist atleast one answer which does not belong to the Task Questions\n      throw new HttpException(\n        {\n          status: HttpStatus.PRECONDITION_FAILED,\n          error: 'The answers does not belong to task questions.',\n        },\n        HttpStatus.PRECONDITION_FAILED,\n      );\n    }\n\n    const feedback = feedbackDtoToEntity(createFeedbackDto);\n    feedback.userId = contextService.get('user').id;\n    return this.feedbackRepository.save(feedback);\n  }\n\n  findAll(query?: FindAllFeedbackDto) {\n    const options: FindManyOptions = {\n      relations: ['task'],\n    };\n    if (query && query.taskId) {\n      options.where = {\n        taskId: query.taskId,\n      };\n    }\n    return this.feedbackRepository.find(options);\n  }\n\n  async findFeedbacks(taskId: string) {\n    // Check if user have Read permission for the Task\n    await findWithPermissionCheck(taskId, Action.Read, this.taskRepository);\n    return this.feedbackRepository.find({\n      where: {\n        taskId,\n      },\n    });\n  }\n\n  async findOne(id: string) {\n    const feedback = await this.feedbackRepository.findOneOrFail(id, {\n      relations: ['answers'],\n    });\n\n    const ability = contextService.get('userAbility') as AppAbility;\n    if (ability.can(Action.Read, feedback)) {\n      return feedback;\n    } else {\n      // User implicitly have Read permission on Feedback if the user have Read permission on the Task to which this feedback belongs.\n      await findWithPermissionCheck(\n        feedback.taskId,\n        Action.Read,\n        this.taskRepository,\n      );\n      return feedback;\n    }\n  }\n\n  async update(id: string, updateFeedbackDto: UpdateFeedbackDto) {\n    // first check if the record exist in database because we use .save here and\n    // save will create new if it not exists, but we don't want to create new here\n    // as this is an update call.\n    await findWithPermissionCheck(id, Action.Update, this.feedbackRepository);\n    const feedback = feedbackDtoToEntity(updateFeedbackDto);\n    feedback.id = id;\n    // using save instead of update here to also add/remove Answers relationship\n    await this.feedbackRepository.save(feedback);\n    return this.feedbackRepository.findOne(id);\n  }\n\n  async remove(id: string) {\n    await findWithPermissionCheck(id, Action.Delete, this.feedbackRepository);\n    return this.feedbackRepository.delete(id);\n  }\n\n  searchAll() {\n    return this.feedbackRepository.find({\n      where: {\n        userId: contextService.get('user')?.id,\n      },\n      relations: ['task'],\n    });\n  }\n\n  async releasePayment(id: string) {\n    const feedback = await this.feedbackRepository.findOneOrFail(id, {\n      select: ['id', 'taskId', 'paymentStatus'],\n    });\n    // Check if user have Update permission on the Task for which the payment is to be released.\n    await findWithPermissionCheck(\n      feedback.taskId,\n      Action.Update,\n      this.taskRepository,\n    );\n\n    if (feedback.paymentStatus === PaymentStatus.Completed) {\n      // Payment already completed\n      throw new HttpException(\n        {\n          status: HttpStatus.PRECONDITION_FAILED,\n          error: 'Payment for the Feedback is already completed.',\n        },\n        HttpStatus.PRECONDITION_FAILED,\n      );\n    }\n    return this.feedbackRepository.update(id, {\n      paymentStatus: PaymentStatus.Completed,\n    });\n  }\n\n  async rateFeedback(id: string, rateFeedbackDto: RateFeedbackDto) {\n    const feedback = await this.feedbackRepository.findOneOrFail(id, {\n      select: ['id', 'taskId'],\n    });\n    // Check if user have Update permission on the Task for which the rating is to be given.\n    await findWithPermissionCheck(\n      feedback.taskId,\n      Action.Update,\n      this.taskRepository,\n    );\n\n    const updatedFeedback = feedbackDtoToEntity(rateFeedbackDto);\n    updatedFeedback.id = id;\n    return this.feedbackRepository.save(updatedFeedback);\n  }\n\n  async rateTask(feedbackId: string, rateTaskDto: RateTaskDto) {\n    // Check if user have Read permission on the Feedback\n    await findWithPermissionCheck(\n      feedbackId,\n      Action.Read,\n      this.feedbackRepository,\n    );\n\n    const updatedFeedback = feedbackDtoToEntity(rateTaskDto);\n    updatedFeedback.id = feedbackId;\n    return this.feedbackRepository.save(updatedFeedback);\n  }\n}\n\nfunction feedbackDtoToEntity(\n  dto: CreateFeedbackDto | UpdateFeedbackDto | RateFeedbackDto | RateTaskDto,\n): Feedback {\n  const data = classToPlain(dto);\n  return plainToClass(Feedback, data);\n}\n","import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { packRules } from '@casl/ability/extra';\nimport * as contextService from 'request-context';\n\n@ApiTags('IAM')\n@Controller('iam')\nexport class IamController {\n  /**\n   * Get permissions of the calling user.\n   */\n  @ApiBearerAuth()\n  @Get('getPermissions')\n  getPermissions() {\n    return packRules(\n      contextService.get('userAbility')?.rules,\n      (subjectType: any) => {\n        if (typeof subjectType === 'string') {\n          return subjectType;\n        }\n        return subjectType.name;\n      },\n    );\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { IamController } from './iam.controller';\n\n@Module({\n  controllers: [IamController]\n})\nexport class IamModule {}\n","import {\n  Ability,\n  AbilityClass,\n  AbilityBuilder,\n  InferSubjects,\n  ExtractSubjectType,\n} from '@casl/ability';\nimport { Project } from '../projects/entities/project.entity';\nimport { Task } from '../tasks/entities/task.entity';\nimport { Feedback } from '../feedbacks/entities/feedback.entity';\nimport { Role, User } from '../users/entities/user.entity';\n\n/**\n * Defines the policy for a User.\n * The policy includes the actions a User can perform on entities.\n */\n\nexport enum Action {\n  Manage = 'manage',\n  Create = 'create',\n  Read = 'read',\n  Update = 'update',\n  Delete = 'delete',\n}\n\ntype Subjects =\n  | InferSubjects<typeof Project | typeof Task | typeof Feedback>\n  | 'all';\n\ntype AppAbilities = [Action, Subjects];\nexport type AppAbility = Ability<AppAbilities>;\nexport const AppAbility = Ability as AbilityClass<AppAbility>;\n\ntype DefinePermissions = (\n  user: User,\n  builder: AbilityBuilder<AppAbility>,\n) => void;\n\n// For each role, define the permissions\nconst rolePermissions: Record<Role, DefinePermissions> = {\n  admin(user, { can }) {\n    can(Action.Manage, 'all');\n  },\n  developer(user, { can }) {\n    can(Action.Manage, Project, { userId: user.id });\n    can(Action.Manage, Task, { userId: user.id });\n  },\n  crowdworker(user, { can }) {\n    can(Action.Create, Feedback);\n    can(Action.Read, Feedback, { userId: user.id });\n  },\n};\n\nexport function defineAbilityFor(user: User): AppAbility {\n  const builder = new AbilityBuilder(AppAbility);\n\n  user.roles.forEach((role) => {\n    if (typeof rolePermissions[role] === 'function') {\n      rolePermissions[role](user, builder);\n    } else {\n      throw new Error(`Trying to use unknown role \"${role}\"`);\n    }\n  });\n\n  return builder.build({\n    detectSubjectType: (item) =>\n      item.constructor as ExtractSubjectType<Subjects>,\n  });\n}\n","import { Action } from './policy';\nimport { FindOneOptions, Repository } from 'typeorm';\nimport { ForbiddenError } from '@casl/ability';\nimport * as contextService from 'request-context';\n\n/**\n * Retrieve an entity from database and check permissions on it\n * @param id The id of the entity in database\n * @param action The action to check permission for\n * @param repository The repository to use to retrieve record from databae\n */\nexport async function findWithPermissionCheck<T>(\n  id: string,\n  action: Action,\n  repository: Repository<T>,\n  findOneOptions?: FindOneOptions<T>,\n): Promise<T> {\n  const entity: T = await repository.findOneOrFail(id, findOneOptions);\n  // check if user have permission to remove this project\n  ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n    action,\n    entity,\n  );\n  return entity;\n}\n","import {\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUUID,\n} from 'class-validator';\n\nexport class CreateProjectDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n  @IsString()\n  @IsOptional()\n  description?: string;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateProjectDto } from './create-project.dto';\nimport { ProjectStatus } from '../entities/project.entity';\nimport { IsEnum, IsOptional } from 'class-validator';\n\nexport class UpdateProjectDto extends PartialType(CreateProjectDto) {\n  @IsEnum(ProjectStatus)\n  @IsOptional()\n  status?: ProjectStatus;\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nexport enum ProjectStatus {\n  Open = 'open',\n  Closed = 'closed',\n}\n\n@Entity()\nexport class Project {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  title: string;\n\n  @Column({ type: 'text', nullable: true })\n  description: string;\n\n  @CreateDateColumn({ type: 'timestamp with time zone' })\n  dateCreated: Date;\n\n  @Column({ type: 'enum', enum: ProjectStatus, default: ProjectStatus.Open })\n  status: ProjectStatus;\n\n  @Column('uuid')\n  userId: string;\n\n  public constructor(init?: Partial<Project>) {\n    Object.assign(this, init);\n  }\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ProjectsService } from './projects.service';\nimport { CreateProjectDto } from './dto/create-project.dto';\nimport { UpdateProjectDto } from './dto/update-project.dto';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { ForbiddenError } from '@casl/ability';\nimport * as contextService from 'request-context';\nimport { Action } from '../iam/policy';\nimport { Project } from './entities/project.entity';\n\n@ApiTags('projects')\n@Controller('projects')\nexport class ProjectsController {\n  constructor(private readonly projectsService: ProjectsService) {}\n\n  /**\n   * Create a new Project. The user must have Create permission for Projects.\n   */\n  @ApiBearerAuth()\n  @Post()\n  create(@Body() createProjectDto: CreateProjectDto) {\n    // check if user have permission to create project\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Create,\n      Project,\n    );\n    return this.projectsService.create(createProjectDto);\n  }\n\n  /**\n   * Get a list of all Projects. The user must have permission to Read all Projects.\n   */\n  @ApiBearerAuth()\n  @Get()\n  findAll() {\n    // check if user have permission to list projects\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Read,\n      new Project(),\n    );\n    return this.projectsService.findAll();\n  }\n\n  /**\n   * Get a list of Projects on which the calling user have access to.\n   * The user must have Read permission on the Projects.\n   */\n  @ApiBearerAuth()\n  @Get('search')\n  searchAll() {\n    // check if user have permission to read projects\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Read,\n      Project,\n    );\n    return this.projectsService.searchAll();\n  }\n\n  /**\n   * Get a Project. The calling user must have Read permission the Project.\n   */\n  @ApiBearerAuth()\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.projectsService.findOne(id);\n  }\n\n  /**\n   * Update a Project. The calling user must have Update permission the Project.\n   */\n  @ApiBearerAuth()\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateProjectDto: UpdateProjectDto) {\n    return this.projectsService.update(id, updateProjectDto);\n  }\n\n  /**\n   * Delete a Project. The calling user must have Delete permission the Project.\n   */\n  @ApiBearerAuth()\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.projectsService.remove(id);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { ProjectsService } from './projects.service';\nimport { ProjectsController } from './projects.controller';\nimport { Project } from './entities/project.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Project])],\n  controllers: [ProjectsController],\n  providers: [ProjectsService],\n})\nexport class ProjectsModule {}\n","import { Injectable } from '@nestjs/common';\nimport { CreateProjectDto } from './dto/create-project.dto';\nimport { UpdateProjectDto } from './dto/update-project.dto';\nimport { Project } from './entities/project.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { classToPlain, plainToClass } from 'class-transformer';\nimport * as contextService from 'request-context';\nimport { ForbiddenError } from '@casl/ability';\nimport { Action } from '../iam/policy';\nimport { findWithPermissionCheck } from '../iam/utils';\n\n@Injectable()\nexport class ProjectsService {\n  constructor(\n    @InjectRepository(Project)\n    private projectRepository: Repository<Project>,\n  ) {}\n\n  create(createProjectDto: CreateProjectDto) {\n    const project = projectDtoEntity(createProjectDto);\n    project.userId = contextService.get('user').id;\n    return this.projectRepository.save(project);\n  }\n\n  findAll() {\n    return this.projectRepository.find();\n  }\n\n  searchAll() {\n    return this.projectRepository.find({\n      where: {\n        userId: contextService.get('user')?.id,\n      },\n    });\n  }\n\n  findOne(id: string) {\n    return findWithPermissionCheck(id, Action.Read, this.projectRepository);\n  }\n\n  async update(id: string, updateProjectDto: UpdateProjectDto) {\n    await findWithPermissionCheck(id, Action.Update, this.projectRepository);\n    const project = projectDtoEntity(updateProjectDto);\n    await this.projectRepository.update(id, project);\n    return this.projectRepository.findOne(id);\n  }\n\n  async remove(id: string) {\n    await findWithPermissionCheck(id, Action.Delete, this.projectRepository);\n    return this.projectRepository.delete(id);\n  }\n}\nfunction projectDtoEntity(dto: CreateProjectDto | UpdateProjectDto): Project {\n  const data = classToPlain(dto);\n  return plainToClass(Project, data);\n}\n","import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Skill {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n}\n","import { Module } from '@nestjs/common';\nimport { SkillsService } from './skills.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Skill } from './entities/skill.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Skill]), ConfigModule, HttpModule],\n  providers: [SkillsService],\n})\nexport class SkillsModule {}\n","import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Skill } from './entities/skill.entity';\nimport { Logger } from '@nestjs/common';\nimport { Timeout } from '@nestjs/schedule';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { firstValueFrom } from 'rxjs';\n\n@Injectable()\nexport class SkillsService {\n  constructor(\n    private httpService: HttpService,\n    private configService: ConfigService,\n    @InjectRepository(Skill)\n    private skillRepository: Repository<Skill>,\n  ) {}\n\n  /**\n   * Fetching Skills from the Admin service and saving in database\n   * Called once whenever application runs. Saves skills in database only if they are not already saved\n   * */\n  @Timeout(0)\n  async fetchAndSaveSkills() {\n    const skill = await this.skillRepository.findOne();\n    if (skill) {\n      Logger.debug('skills already available in database.');\n      return;\n    }\n    const adminAPI = this.configService.get<string>('ADMIN_API');\n    if (adminAPI) {\n      try {\n        const response = await firstValueFrom(\n          this.httpService.get<Skill[]>(`${adminAPI}/skills`),\n        );\n        const skills = response.data;\n        this.skillRepository.save(skills);\n        Logger.debug('Skills saved in database');\n      } catch (err) {\n        Logger.error(`failed to fetch and save skills ${err}`);\n      }\n    }\n  }\n}\n","import { IsArray, IsNotEmpty } from 'class-validator';\nimport { Image } from '../entities/image.entity';\n\nexport class BatchCreateImagesDto {\n  @IsArray()\n  @IsNotEmpty()\n  images: Image[];\n}\n","import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n  IsUUID,\n  Max,\n  Min,\n} from 'class-validator';\nimport { AccessType, PrototypeFormat, TestType } from '../entities/task.entity';\nimport { Question } from '../entities/question.entity';\n\nexport class CreateTaskDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @IsEnum(TestType)\n  @IsNotEmpty()\n  testType: TestType;\n\n  @IsEnum(PrototypeFormat)\n  @IsNotEmpty()\n  prototypeFormat: PrototypeFormat;\n\n  @IsEnum(AccessType)\n  @IsOptional()\n  accessType: AccessType;\n\n  @IsUrl()\n  @IsOptional()\n  iframeUrl1?: string;\n\n  @IsUrl()\n  @IsOptional()\n  iframeUrl2?: string;\n\n  @IsString()\n  @IsOptional()\n  textualDescription1?: string;\n\n  @IsString()\n  @IsOptional()\n  textualDescription2?: string;\n\n  @IsInt()\n  @Min(18)\n  @Max(67)\n  @IsOptional()\n  minAge?: number;\n\n  @IsInt()\n  @Min(18)\n  @Max(67)\n  @IsOptional()\n  maxAge?: number;\n\n  @IsInt()\n  @Min(0)\n  @Max(49)\n  @IsOptional()\n  minExperience?: number;\n\n  @IsInt()\n  @Min(0)\n  @Max(49)\n  @IsOptional()\n  maxExperience?: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  budget: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  incentive: number;\n\n  @IsUUID()\n  @IsNotEmpty()\n  projectId: string;\n\n  @IsArray()\n  @IsUUID('all', { each: true })\n  @IsOptional()\n  skills: string[];\n\n  @IsArray()\n  @IsUUID('all', { each: true })\n  @IsOptional()\n  countries: string[];\n\n  @IsArray()\n  @IsOptional()\n  questions: Question[];\n}\n","import { QuestionType } from '../entities/question.entity';\n\nexport class FeedbackStatsResponseDto {\n  stats: QuestionAnswerStats[];\n}\n\nexport class QuestionAnswerStats {\n  questionId: string;\n  questionType: QuestionType;\n  starRatingAnswer: number;\n  starRatingAnswerCount: number;\n  radioAnswer: string;\n  radioAnswerCount: number;\n  thumbsUpCount: number;\n  thumbsDownCount: number;\n}\n","export class FileUploadSignatureResponseDto {\n  apiKey: string;\n  uploadUrl: string;\n  signature: string;\n  timestamp: number;\n  folder: string;\n}\n","import { IsOptional, IsUUID } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class FindAllTasksDto {\n  @IsUUID()\n  @IsOptional()\n  @ApiProperty({\n    description: 'The project to which the tasks belongs.',\n    required: false,\n  })\n  projectId: string;\n}\n","import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreateTaskDto } from './create-task.dto';\n\nexport class UpdateTaskDto extends PartialType(\n  OmitType(CreateTaskDto, ['projectId'] as const),\n) {}\n","import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Task } from './task.entity';\nimport { Max, Min } from 'class-validator';\n\n@Entity()\nexport class Image {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'text' })\n  url: string;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  dateCreated: Date;\n\n  @Min(1)\n  @Max(2)\n  @Column({ default: 1 })\n  prototypeNumber: number;\n\n  @ManyToOne(() => Task, (task) => task.images, {\n    onDelete: 'CASCADE',\n    orphanedRowAction: 'delete',\n  })\n  @JoinColumn({ name: 'taskId' })\n  taskId: string;\n\n  @Column()\n  cloudId: string;\n\n  public constructor(init?: Partial<Image>) {\n    Object.assign(this, init);\n  }\n}\n","import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Min } from 'class-validator';\nimport { Task } from './task.entity';\n\nexport enum QuestionType {\n  Text = 'text',\n  Radio = 'radio',\n  StarRating = 'star-rating',\n  ThumbsRating = 'thumbs-rating',\n}\n\n/**\n * A Question belongs to a Task. Questions are created by /tasks POST and PATCH endpoints.\n */\n@Entity()\nexport class Question {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'enum', enum: QuestionType })\n  type: QuestionType;\n\n  @Column()\n  @Min(1)\n  order: number;\n\n  @Column('varchar', { array: true, nullable: true })\n  radioOptions: string[];\n\n  @ManyToOne(() => Task, (task) => task.questions, {\n    onDelete: 'CASCADE',\n    orphanedRowAction: 'delete',\n  })\n  @JoinColumn({ name: 'taskId' })\n  taskId: string;\n}\n","import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Max, Min } from 'class-validator';\nimport { Project } from '../../projects/entities/project.entity';\nimport { Image } from './image.entity';\nimport { Skill } from '../../skills/entities/skill.entity';\nimport { Country } from '../../countries/entities/country.entity';\nimport { Question } from './question.entity';\nimport { Feedback } from '../../feedbacks/entities/feedback.entity';\n\nexport enum TestType {\n  Basic = 'basic',\n  Comparison = 'comparison',\n}\n\nexport enum PrototypeFormat {\n  Image = 'image',\n  Iframe = 'iframe',\n  Text = 'text',\n}\n\nexport enum TaskStatus {\n  Draft = 'draft',\n  Open = 'open',\n  Closed = 'closed',\n}\n\nexport enum AccessType {\n  Open = 'open',\n  Nda = 'nda',\n  Request = 'request',\n}\n\n// Typeorm return decimal values as string. Here is the workaround for that.\n// This solution is copied from https://stackoverflow.com/questions/69872250/typeorm-decimal-column-values-returned-as-strings-instead-of-decimal-numbers\nexport class ColumnNumericTransformer {\n  to(data: number): number {\n    return data;\n  }\n  from(data: string): number {\n    return parseFloat(data);\n  }\n}\n\n@Entity()\nexport class Task {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  title: string;\n\n  @Column({ type: 'text', nullable: true })\n  description: string;\n\n  @CreateDateColumn({ type: 'timestamp with time zone' })\n  dateCreated: Date;\n\n  @Column({ type: 'enum', enum: TestType })\n  testType: TestType;\n\n  @Column({\n    type: 'enum',\n    enum: PrototypeFormat,\n  })\n  prototypeFormat: PrototypeFormat;\n\n  @Column({ type: 'enum', enum: TaskStatus, default: TaskStatus.Draft })\n  status: TaskStatus;\n\n  @Column({\n    type: 'enum',\n    enum: AccessType,\n    default: AccessType.Open,\n  })\n  accessType: AccessType;\n\n  @Column({ type: 'text', nullable: true })\n  iframeUrl1: string;\n\n  @Column({ type: 'text', nullable: true })\n  iframeUrl2: string;\n\n  @Column({ type: 'text', nullable: true })\n  textualDescription1: string;\n\n  @Column({ type: 'text', nullable: true })\n  textualDescription2: string;\n\n  @Min(18)\n  @Max(67)\n  @Column({ nullable: true })\n  minAge: number;\n\n  @Min(18)\n  @Max(67)\n  @Column({ nullable: true })\n  maxAge: number;\n\n  @Min(0)\n  @Max(49)\n  @Column({ nullable: true })\n  minExperience: number;\n\n  @Min(0)\n  @Max(49)\n  @Column({ nullable: true })\n  maxExperience: number;\n\n  @Column('decimal', {\n    transformer: new ColumnNumericTransformer(),\n  })\n  budget: number;\n\n  @Column('decimal', {\n    transformer: new ColumnNumericTransformer(),\n  })\n  incentive: number;\n\n  @Column('uuid')\n  userId: string;\n\n  @Column('uuid')\n  @ManyToOne(() => Project, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'projectId' })\n  projectId: string;\n\n  @OneToMany(() => Image, (image) => image.taskId, {\n    cascade: true,\n    onDelete: 'CASCADE',\n    onUpdate: 'CASCADE',\n  })\n  images: Image[];\n\n  @ManyToMany(() => Skill, {\n    cascade: true,\n    onDelete: 'CASCADE',\n    onUpdate: 'CASCADE',\n  })\n  @JoinTable()\n  skills: Skill[];\n\n  @ManyToMany(() => Country, {\n    cascade: true,\n    onDelete: 'CASCADE',\n    onUpdate: 'CASCADE',\n  })\n  @JoinTable()\n  countries: Country[];\n\n  @OneToMany(() => Question, (question) => question.taskId, {\n    cascade: true,\n    onDelete: 'CASCADE',\n    onUpdate: 'CASCADE',\n  })\n  questions: Question[];\n\n  @OneToMany(() => Feedback, (feedback) => feedback.taskId)\n  feedbacks: Feedback[];\n\n  public constructor(init?: Partial<Task>) {\n    Object.assign(this, init);\n  }\n}\n","import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  Put,\n} from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { ApiBearerAuth, ApiParam, ApiQuery, ApiTags } from '@nestjs/swagger';\nimport { FindAllTasksDto } from './dto/find-all-tasks.dto';\nimport { ForbiddenError } from '@casl/ability';\nimport { Action } from '../iam/policy';\nimport * as contextService from 'request-context';\nimport { Task } from './entities/task.entity';\nimport { Feedback } from '../feedbacks/entities/feedback.entity';\nimport { BatchCreateImagesDto } from './dto/batch-create-images.dto';\n\n@ApiTags('tasks')\n@Controller('tasks')\nexport class TasksController {\n  constructor(private readonly tasksService: TasksService) {}\n\n  /**\n   * Create a new Task. The user must have Create permission for Tasks.\n   * User can only create Tasks for its own Projects.\n   */\n  @ApiBearerAuth()\n  @Post()\n  create(@Body() createTaskDto: CreateTaskDto) {\n    // check if user have permission to create Task\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Create,\n      Task,\n    );\n    return this.tasksService.create(createTaskDto);\n  }\n\n  /**\n   * By default, Task is created as draft. Use this endpoint to Activate the task.\n   * Activating a task changes its status to open, and it can no longer be edited.\n   * The calling user must have Update permission on the Task.\n   * There are certain pre-requisites for activating a Task.\n   *\n   * 1. The Task must contain Questions\n   * 2. The Task must contain crowd selection criteria (Skills and Countries)\n   * 3. The Task must be in Draft state\n   * 4. The task must contain Pictures, or Iframe Urls or textual description of Idea.\n   */\n  @ApiBearerAuth()\n  @Put(':id/activate')\n  activate(@Param('id') id: string) {\n    return this.tasksService.activate(id);\n  }\n\n  /**\n   * Task can only be closed if it is in Open state.\n   * The calling user must have Update permission on the Task\n   */\n  @ApiBearerAuth()\n  @Put(':id/close')\n  close(@Param('id') id: string) {\n    return this.tasksService.close(id);\n  }\n\n  /**\n   * Get a list of all Tasks. The user must have permission to Read all Tasks.\n   */\n  @ApiBearerAuth()\n  @Get()\n  findAll(@Query() query?: FindAllTasksDto) {\n    // check if user have permission to list Tasks\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Read,\n      new Task(),\n    );\n    return this.tasksService.findAll(query);\n  }\n\n  /**\n   * Get a list of all task iterations for a projectId. The iterations are returned in descending order.\n   * The user must have Read permission on the Project and its Task iterations.\n   */\n  @ApiParam({\n    name: 'projectId',\n    description: 'The project id to list iterations for',\n  })\n  @ApiBearerAuth()\n  @Get('iterations/:projectId')\n  findIterations(@Param('projectId') projectId: string) {\n    // check if user have permission to read Tasks\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Read,\n      Task,\n    );\n    return this.tasksService.findIterations(projectId);\n  }\n\n  /**\n   * Get open tasks for Crowdworker to work on. The calling user must have Create permission for the Feedback,\n   * because only those users can see open tasks which have permission to create feedbacks.\n   * Only those Tasks will be returned where user have not provided Feedback yet.\n   */\n  @ApiBearerAuth()\n  @Get('open')\n  findOpenTasks() {\n    // Check if user have permission to create feedback\n    ForbiddenError.from(contextService.get('userAbility')).throwUnlessCan(\n      Action.Create,\n      Feedback,\n    );\n    return this.tasksService.findOpenTasks();\n  }\n\n  /**\n   * Get a Task. The calling user must have Read permission the Task either explicitly or implicitly.\n   * Explicit Permission: E.g Given by a role e.g developer role\n   * Implicit Permission: The task criteria matches calling user profile, and calling user have permission to create Feedback.\n   * Implicit Permission: This user has created Feedback for this Task\n   */\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.tasksService.findOne(id);\n  }\n\n  /**\n   * Get statistics for feedbacks e.g, no of each star rating answer, number of thumbs up/down, no of each radio option selections.\n   * The user must have Read Permission for the Task.\n   */\n  @Get(':id/feedbackStats')\n  feedbackStats(@Param('id') id: string) {\n    return this.tasksService.feedbackStats(id);\n  }\n\n  /**\n   * Update a Task. The calling user must have Update permission the Task.\n   */\n  @ApiBearerAuth()\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto) {\n    return this.tasksService.update(id, updateTaskDto);\n  }\n\n  /**\n   * Delete a Task. The calling user must have Delete permission the Task.\n   */\n  @ApiBearerAuth()\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.tasksService.remove(id);\n  }\n\n  /**\n   * Images are uploaded to cloudinary.com. For uploading an image, a signature is required.\n   * This endpoint returns that signature which clients can use to upload images.\n   */\n  @ApiBearerAuth()\n  @Get(':id/imageUploadSignature')\n  imageUploadSignature(@Param('id') id: string) {\n    return this.tasksService.getImageUploadSignature(id);\n  }\n\n  /**\n   * Batch create Images\n   * The user must have Update permission for Task.\n   */\n  @ApiBearerAuth()\n  @Post(':id/batchCreateImages')\n  batchCreateImages(\n    @Param('id') id: string,\n    @Body() saveImageUrlsDto: BatchCreateImagesDto,\n  ) {\n    return this.tasksService.batchCreateImages(id, saveImageUrlsDto);\n  }\n\n  /**\n   * Get list of images for the Task.\n   * The caller must have read permission for the Task either explicitly or either implicitly.\n   * Explicit Permission: E.g Given by a role e.g developer role\n   * Implicit Permission: The task's criteria matches calling user profile, and calling user have permission to create Feedback.\n   * Implicit Permission: This user has created Feedback for this Task\n   */\n  @ApiBearerAuth()\n  @ApiQuery({\n    name: 'prototypeNumber',\n    required: false,\n    description: 'Optional filtering by prototypeNumber',\n    type: 'number',\n  })\n  @Get(':id/images')\n  findAllImages(\n    @Param('id') id: string,\n    @Query('prototypeNumber') prototypeNumber?: number,\n  ) {\n    return this.tasksService.findAllImages(id, prototypeNumber);\n  }\n\n  /**\n   * Delete an Image for Task. The calling user must have Update permission on the Task.\n   */\n  @ApiBearerAuth()\n  @Delete(':id/images/:imageId')\n  removeImage(@Param('id') id: string, @Param('imageId') imageId: string) {\n    return this.tasksService.removeImage(id, imageId);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { TasksController } from './tasks.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Task } from './entities/task.entity';\nimport { Image } from './entities/image.entity';\nimport { Question } from './entities/question.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { Project } from '../projects/entities/project.entity';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Task, Image, Question, Project]),\n    ConfigModule,\n    UsersModule,\n  ],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n","import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { classToPlain, plainToClass } from 'class-transformer';\nimport {\n  PrototypeFormat,\n  Task,\n  TaskStatus,\n  TestType,\n} from './entities/task.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, In, Repository } from 'typeorm';\nimport { Skill } from '../skills/entities/skill.entity';\nimport { Country } from '../countries/entities/country.entity';\nimport { FindAllTasksDto } from './dto/find-all-tasks.dto';\nimport { v2 as cloudinary } from 'cloudinary';\nimport { ConfigService } from '@nestjs/config';\nimport { FileUploadSignatureResponseDto } from './dto/file-upload-signature-response.dto';\nimport { Action, AppAbility } from '../iam/policy';\nimport { findWithPermissionCheck } from '../iam/utils';\nimport * as contextService from 'request-context';\nimport { Project } from '../projects/entities/project.entity';\nimport { User } from '../users/entities/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { Feedback } from '../feedbacks/entities/feedback.entity';\nimport { BatchCreateImagesDto } from './dto/batch-create-images.dto';\nimport { Image } from './entities/image.entity';\nimport cloudinaryConfig from '../config/cloudinary';\nimport { Question, QuestionType } from './entities/question.entity';\nimport { Answer, ThumbsRating } from '../feedbacks/entities/answer.entity';\nimport {\n  FeedbackStatsResponseDto,\n  QuestionAnswerStats,\n} from './dto/feedback-stats-response.dto';\n\ncloudinary.config(cloudinaryConfig().cloudinary.config);\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    private configService: ConfigService,\n    private userService: UsersService,\n    @InjectRepository(Task)\n    private taskRepository: Repository<Task>,\n    @InjectRepository(Project)\n    private projectRepository: Repository<Project>,\n  ) {}\n  async create(createTaskDto: CreateTaskDto) {\n    // Check if Project of the Task belongs to user.\n    const user = contextService.get('user') as User;\n    const project = await this.projectRepository.findOneOrFail(\n      createTaskDto.projectId,\n    );\n    if (project.userId !== user.id) {\n      throw new HttpException(\n        {\n          status: HttpStatus.FORBIDDEN,\n          error: 'The project does not belongs to the user.',\n        },\n        HttpStatus.FORBIDDEN,\n      );\n    }\n\n    // check if there is already a draft or open Task available, the new Task cannot be created.\n    const existingTask = await this.taskRepository.findOne({\n      select: ['id'],\n      where: {\n        status: In([TaskStatus.Open, TaskStatus.Draft]),\n        projectId: createTaskDto.projectId,\n      },\n    });\n\n    if (existingTask) {\n      throw new HttpException(\n        {\n          status: HttpStatus.PRECONDITION_FAILED,\n          error:\n            'Please close previous Task iteration before starting a new one.',\n        },\n        HttpStatus.PRECONDITION_FAILED,\n      );\n    }\n\n    if (createTaskDto.incentive > createTaskDto.budget) {\n      throw new HttpException(\n        {\n          status: HttpStatus.UNPROCESSABLE_ENTITY,\n          error: 'Incentive cannot be greater than total budget.',\n        },\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      );\n    }\n\n    const task = taskDtoToEntity(createTaskDto);\n    task.userId = user.id;\n    if (createTaskDto.skills) {\n      // add skills relationship\n      task.skills = createTaskDto.skills.map((id) => <Skill>{ id });\n    }\n    if (createTaskDto.countries) {\n      // add countries relationship\n      task.countries = createTaskDto.countries.map((id) => <Country>{ id });\n    }\n    return this.taskRepository.save(task);\n  }\n\n  findAll(query?: FindAllTasksDto) {\n    const options: FindManyOptions = {\n      relations: ['skills', 'countries'],\n    };\n    if (query && query.projectId) {\n      // order by dateCreated to return in the order of iterations\n      options.where = { projectId: query.projectId };\n      options.order = { dateCreated: 'ASC' };\n    }\n    return this.taskRepository.find(options);\n  }\n\n  async findIterations(projectId: string) {\n    // check if user has read permission on the project\n    await findWithPermissionCheck(\n      projectId,\n      Action.Read,\n      this.projectRepository,\n    );\n    const tasks = await this.taskRepository.find({\n      relations: ['skills', 'countries', 'questions'],\n      where: {\n        projectId,\n      },\n      order: {\n        dateCreated: 'DESC',\n      },\n    });\n    tasks.forEach((task) => {\n      task.questions = this.sortQuestions(task.questions);\n    });\n    return tasks;\n  }\n\n  async findOpenTasks() {\n    // get current user from the admin service to get details for matching the criteria (Task vs User)\n    const user = await this.userService.getUser(contextService.get('user').id);\n    const query = this.getTaskMatchingQuery(user);\n    // filter out those tasks on which user have already provided feedback\n    query.leftJoin(\n      'task.feedbacks',\n      'feedbacks',\n      'feedbacks.userId = :userId',\n      {\n        userId: user.id,\n      },\n    );\n    query.andWhere('feedbacks.taskId IS NULL AND task.status = :taskStatus', {\n      taskStatus: TaskStatus.Open,\n    });\n    return query.getMany();\n  }\n\n  /**\n   * Given a user, find the matching Tasks for it\n   * @param user The user to find Tasks for\n   * @private\n   */\n  private getTaskMatchingQuery(user: User) {\n    let age = null;\n    if (user.birthDate) {\n      const birthDate = new Date(user.birthDate);\n      const now = new Date();\n      age = now.getFullYear() - birthDate.getFullYear();\n      const month = now.getMonth() - birthDate.getMonth();\n      if (month < 0 || (month == 0 && now.getDate() < birthDate.getDate())) {\n        age--;\n      }\n    }\n    const query = this.taskRepository\n      .createQueryBuilder('task')\n      .innerJoinAndSelect(\n        'task.skills',\n        'skills',\n        'skills.id IN (:...skills) ',\n        {\n          skills: user.skills.map((skill) => skill.id),\n        },\n      )\n      .leftJoinAndSelect('task.countries', 'countries')\n      .where(\n        '(task.maxExperience >= :userExperience OR task.maxExperience IS NULL) ' +\n          'AND (task.minExperience <= :userExperience OR task.minExperience IS NULL) ' +\n          'AND (task.maxAge >= :userAge OR task.maxAge IS NULL ) ' +\n          'AND (task.minAge <= :userAge OR task.minAge IS NULL ) ' +\n          'AND (countries.id = :countryId OR countries.id IS NULL)',\n        {\n          userExperience: user.experience,\n          userAge: age,\n          countryId: user.country?.id || null,\n        },\n      );\n    return query;\n  }\n\n  async findOne(id: string) {\n    const task = await this.taskRepository.findOneOrFail(id, {\n      relations: ['skills', 'countries', 'questions'],\n    });\n    // sort questions for the task\n    task.questions = this.sortQuestions(task.questions);\n    const ability = contextService.get('userAbility') as AppAbility;\n    if (ability.can(Action.Read, task)) {\n      // user have explicit permission to Read the task\n      return task;\n    }\n    // Check if user implicitly have permission to Read the Task\n    // i.e if user have permission to create Feedback for this Task\n    // first fetch the user from admin service\n    if (ability.can(Action.Create, Feedback)) {\n      const user = await this.userService.getUser(\n        contextService.get('user').id,\n      );\n      const query = this.getTaskMatchingQuery(user);\n      query.andWhere('task.id = :taskId', {\n        taskId: id,\n      });\n      const taskMatchedCount = await query.getCount();\n      if (taskMatchedCount > 0) {\n        return task;\n      }\n    }\n    // user have access to Task if user have provided feedback on the task\n    if (await this.hasProvidedFeedbackOnTask(id)) {\n      return task;\n    }\n\n    // User does not have access to this Task\n    throw new HttpException(\n      {\n        status: HttpStatus.FORBIDDEN,\n        error: 'You do not have permission for this Task.',\n      },\n      HttpStatus.FORBIDDEN,\n    );\n  }\n\n  private sortQuestions(questions: Question[]) {\n    return questions.sort((a, b) => {\n      return a.order - b.order;\n    });\n  }\n\n  async update(id: string, updateTaskDto: UpdateTaskDto) {\n    // check if user have permission to update Task\n    // a user can only update task which belongs to him (task.userId = user.id)\n    const existingTask = await findWithPermissionCheck(\n      id,\n      Action.Update,\n      this.taskRepository,\n    );\n\n    // task can only be updated if it is draft state\n    this.draftCheck(existingTask);\n\n    const task = taskDtoToEntity(updateTaskDto);\n    if (updateTaskDto.skills) {\n      // update skills relationship\n      task.skills = updateTaskDto.skills.map((id) => <Skill>{ id });\n    }\n    if (updateTaskDto.countries) {\n      // update countries relationship\n      task.countries = updateTaskDto.countries.map((id) => <Country>{ id });\n    }\n    task.id = id;\n    // using save instead of update here to also add/remove the relationships\n    await this.taskRepository.save(task);\n    if (updateTaskDto.questions) {\n      const updatedTask = await this.taskRepository.findOne(id, {\n        relations: ['questions'],\n      });\n      updatedTask.questions = this.sortQuestions(updatedTask.questions);\n      return updatedTask;\n    }\n    return this.taskRepository.findOne(id);\n  }\n\n  async remove(id: string) {\n    // check if user have permission to delete Task\n    // a user can only delete task which belongs to him (task.userId = user.id)\n    await findWithPermissionCheck(id, Action.Delete, this.taskRepository);\n    return this.taskRepository.delete(id);\n  }\n\n  async activate(id: string) {\n    // check if user have permission to update Task\n    // a user can only update/activate task which belongs to him (task.userId = user.id)\n    const task = await findWithPermissionCheck(\n      id,\n      Action.Update,\n      this.taskRepository,\n      {\n        relations: ['images', 'skills', 'countries', 'questions'],\n      },\n    );\n    const messages: string[] = [];\n    // validate task first\n    if (task.status !== TaskStatus.Draft) {\n      messages.push('Task can only be activated when in draft state.');\n    }\n    if (!task.incentive || task.incentive < 0) {\n      messages.push('Please set the incentive.');\n    }\n    if (!task.budget || task.budget < 1) {\n      messages.push('Please set the budget.');\n    }\n    if (task.incentive > task.budget) {\n      messages.push('Incentive cannot be greater than budget.');\n    }\n    if (task.skills.length === 0) {\n      messages.push(\n        'Please provide skills for matching the Task with Crowdworkers.',\n      );\n    }\n    if (task.questions.length === 0) {\n      messages.push('Please provide questions.');\n    }\n    if (this.isIframeFormat(task)) {\n      if (\n        (this.isBasicTest(task) && !task.iframeUrl1) ||\n        task.iframeUrl1?.trim() === ''\n      ) {\n        messages.push('Task cannot be activated without a prototype link.');\n      } else if (\n        this.isComparisonTest(task) &&\n        (!task.iframeUrl1 ||\n          !task.iframeUrl2 ||\n          task.iframeUrl1?.trim() === '' ||\n          task.iframeUrl2?.trim() === '')\n      ) {\n        messages.push('Please provide link for the both prototypes.');\n      }\n    } else if (this.isImageFormat(task)) {\n      if (this.isBasicTest(task) && task.images.length === 0) {\n        messages.push('At-least one image is required for the basic test.');\n      } else if (this.isComparisonTest(task)) {\n        const imageForPrototype1 = task.images.find(\n          (t) => t.prototypeNumber === 1,\n        );\n        const imageForPrototype2 = task.images.find(\n          (t) => t.prototypeNumber === 2,\n        );\n        if (!imageForPrototype1 || !imageForPrototype2) {\n          messages.push('Please provide images for both prototypes.');\n        }\n      }\n    } else if (this.isTextFormat(task)) {\n      if (\n        (this.isBasicTest(task) && !task.textualDescription1) ||\n        task.textualDescription1?.trim() === ''\n      ) {\n        messages.push('Task cannot be activated without textual description.');\n      } else if (\n        this.isComparisonTest(task) &&\n        (!task.textualDescription1 ||\n          task.textualDescription1?.trim() === '' ||\n          !task.textualDescription2 ||\n          task.textualDescription2?.trim() === '')\n      ) {\n        messages.push(\n          'Please provide textual description for both prototypes.',\n        );\n      }\n    } else {\n      messages.push('The Prototype format must be set');\n    }\n    if (messages.length > 0) {\n      throw new HttpException(\n        {\n          status: HttpStatus.PRECONDITION_FAILED,\n          error: messages.join(' '),\n        },\n        HttpStatus.PRECONDITION_FAILED,\n      );\n    }\n    // activate the task after validation\n    task.status = TaskStatus.Open;\n    return this.taskRepository.save(task);\n  }\n\n  private isBasicTest(task: Task) {\n    return task.testType === TestType.Basic;\n  }\n\n  private isComparisonTest(task: Task) {\n    return task.testType === TestType.Comparison;\n  }\n\n  private isImageFormat(task: Task) {\n    return task.prototypeFormat === PrototypeFormat.Image;\n  }\n\n  private isIframeFormat(task: Task) {\n    return task.prototypeFormat === PrototypeFormat.Iframe;\n  }\n\n  private isTextFormat(task: Task) {\n    return task.prototypeFormat === PrototypeFormat.Text;\n  }\n\n  getImageUploadSignature(id: string) {\n    const timestamp = Math.round(new Date().getTime() / 1000);\n    const cloudinaryConfig = this.configService.get('cloudinary');\n    const folder = `${cloudinaryConfig.imagesFolder}/${id}`;\n    const signature = cloudinary.utils.api_sign_request(\n      {\n        timestamp,\n        folder,\n      },\n      cloudinaryConfig.config.api_secret,\n    );\n    return plainToClass(FileUploadSignatureResponseDto, {\n      apiKey: cloudinaryConfig.config.api_key,\n      uploadUrl: cloudinaryConfig.apiUrl\n        .replace(':cloud_name', cloudinaryConfig.config.cloud_name)\n        .replace(':action', 'upload'),\n      signature,\n      timestamp,\n      folder,\n    });\n  }\n\n  async batchCreateImages(\n    taskId: string,\n    batchCreateImagesDto: BatchCreateImagesDto,\n  ) {\n    // check if user have permission to update Task\n    // a user can only update task which belongs to him (task.userId = user.id)\n    const existingTask = await findWithPermissionCheck(\n      taskId,\n      Action.Update,\n      this.taskRepository,\n    );\n    // Images can only be added if the task is in draft state\n    this.draftCheck(existingTask);\n\n    batchCreateImagesDto.images.forEach((image) => (image.taskId = taskId));\n    // insert images\n    return this.taskRepository.manager.insert(\n      Image,\n      batchCreateImagesDto.images,\n    );\n  }\n\n  private draftCheck(task: Task) {\n    if (task.status !== TaskStatus.Draft) {\n      throw new HttpException(\n        {\n          status: HttpStatus.PRECONDITION_FAILED,\n          error: 'Task is not in draft state.',\n        },\n        HttpStatus.PRECONDITION_FAILED,\n      );\n    }\n  }\n\n  async findAllImages(taskId: string, prototypeNumber: number) {\n    let hasPermission = false;\n    // check if user have permission to Read Task\n    const task = await this.taskRepository.findOneOrFail(taskId);\n    const ability = contextService.get('userAbility') as AppAbility;\n    if (ability.can(Action.Read, task)) {\n      // user have explicit permission to Read the task\n      hasPermission = true;\n    }\n\n    // Check if user implicitly have permission to Read the Task\n    // i.e if user have permission to create Feedback for this Task\n    // first fetch the user from admin service\n    if (!hasPermission && ability.can(Action.Create, Feedback)) {\n      const user = await this.userService.getUser(\n        contextService.get('user').id,\n      );\n      const query = this.getTaskMatchingQuery(user);\n      query.andWhere('task.id = :taskId', {\n        taskId,\n      });\n      const taskMatchedCount = await query.getCount();\n      if (taskMatchedCount > 0) {\n        hasPermission = true;\n      }\n    }\n    if (!hasPermission && (await this.hasProvidedFeedbackOnTask(taskId))) {\n      // user have access to Task if user have provided feedback on the task\n      hasPermission = true;\n    }\n    if (!hasPermission) {\n      // User does not have permission to read images for this Task\n      throw new HttpException(\n        {\n          status: HttpStatus.FORBIDDEN,\n          error: 'You do not have permission to access Images for this Task.',\n        },\n        HttpStatus.FORBIDDEN,\n      );\n    }\n\n    const where = {\n      taskId,\n    };\n    if (prototypeNumber) {\n      where['prototypeNumber'] = prototypeNumber;\n    }\n    const images = await (this.taskRepository.manager.find(Image, {\n      where,\n    }) as Promise<Image[]>);\n    // remove image extension to save transformations count on cloudinary.\n    // images.forEach((img) => (img.url = img.url.replace(/\\.[^/.]+$/, '')));\n    return images;\n  }\n\n  private async hasProvidedFeedbackOnTask(taskId: string) {\n    const feedback = await this.taskRepository.manager.find(Feedback, {\n      where: {\n        userId: contextService.get('user')?.id,\n        taskId,\n      },\n    });\n    return feedback ? true : false;\n  }\n\n  async removeImage(taskId: string, imageId: string) {\n    // check if user have permission to Update Task\n    const task = await findWithPermissionCheck(\n      taskId,\n      Action.Update,\n      this.taskRepository,\n    );\n    // check if image belongs to the taskId\n    const image = await this.taskRepository.manager.findOneOrFail(Image, {\n      where: {\n        id: imageId,\n        taskId,\n      },\n    });\n    // delete image from cloud storage\n    try {\n      const response = await cloudinary.uploader.destroy(image.cloudId);\n      // delete image from database\n      if (response['result'] && response['result'] === 'ok') {\n        await this.taskRepository.manager.delete(Image, image.id);\n      } else {\n        Logger.error(response);\n        throw new HttpException(\n          {\n            status: HttpStatus.UNPROCESSABLE_ENTITY,\n            error: response.result,\n          },\n          HttpStatus.UNPROCESSABLE_ENTITY,\n        );\n      }\n    } catch (err) {\n      Logger.error(\n        `failed deleting image from the cloudinary with public id ${image.cloudId} and imageId ${image.id} `,\n      );\n      throw err;\n    }\n  }\n\n  async close(id: string) {\n    // check if user have permission to close Task\n    const task = await findWithPermissionCheck(\n      id,\n      Action.Update,\n      this.taskRepository,\n    );\n    // validate task first\n    if (task.status !== TaskStatus.Open) {\n      throw new HttpException(\n        {\n          status: HttpStatus.PRECONDITION_FAILED,\n          error: 'Task is not Open. Only Open Task can be closed',\n        },\n        HttpStatus.PRECONDITION_FAILED,\n      );\n    }\n    return this.taskRepository.update(id, {\n      status: TaskStatus.Closed,\n    });\n  }\n\n  async feedbackStats(id: string) {\n    // check if user has read permission on the Task\n    await findWithPermissionCheck(id, Action.Read, this.taskRepository);\n\n    const questionRepo = this.taskRepository.manager.getRepository(Question);\n    const records = await questionRepo\n      .createQueryBuilder('q')\n      .select([\n        'q.id as \"questionId\"',\n        'q.type as \"questionType\"',\n        'a.starRatingAnswer as \"starRatingAnswer\"',\n        'count(a.starRatingAnswer)::int as \"starRatingAnswerCount\"',\n        'a.\"radioAnswer\"',\n        'count(a.\"radioAnswer\")::int as \"radioAnswerCount\"',\n      ])\n      .addSelect(\n        'COUNT(CASE WHEN a.thumbsRatingAnswer = :ratingUp THEN 1 END )::int',\n        'thumbsUpCount',\n      )\n      .setParameter('ratingUp', ThumbsRating.Up)\n      .addSelect(\n        'COUNT(CASE WHEN a.thumbsRatingAnswer = :ratingDown THEN 1 END )::int',\n        'thumbsDownCount',\n      )\n      .setParameter('ratingDown', ThumbsRating.Down)\n      .innerJoin(\n        Answer,\n        'a',\n        'q.id = a.\"questionId\" ' +\n          'AND ( q.type = :thumbsRating OR q.type = :starRating OR q.type = :radio)' +\n          'AND q.taskId = :taskId',\n        {\n          thumbsRating: QuestionType.ThumbsRating,\n          starRating: QuestionType.StarRating,\n          radio: QuestionType.Radio,\n          taskId: id,\n        },\n      )\n      .groupBy('q.id, a.starRatingAnswer, a.radioAnswer')\n      .getRawMany();\n\n    const response = new FeedbackStatsResponseDto();\n    response.stats = records as QuestionAnswerStats[];\n    return response;\n  }\n}\n\nfunction taskDtoToEntity(dto: CreateTaskDto | UpdateTaskDto): Task {\n  const data = classToPlain(dto);\n  return plainToClass(Task, data);\n}\n","import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n  providers: [UsersService],\n  imports: [ConfigModule, HttpModule],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n","import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { User } from './entities/user.entity';\nimport { ConfigService } from '@nestjs/config';\nimport * as contextService from 'request-context';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    private httpService: HttpService,\n    private configService: ConfigService,\n  ) {}\n\n  /**\n   * Get a user from admin service\n   * @param id the uuid for the user\n   */\n  async getUser(id: string) {\n    const adminAPI = this.configService.get<string>('ADMIN_API');\n    if (!adminAPI) {\n      throw new HttpException(\n        {\n          status: HttpStatus.SERVICE_UNAVAILABLE,\n          error: 'Admin service users endpoint url not found.',\n        },\n        HttpStatus.SERVICE_UNAVAILABLE,\n      );\n    }\n    try {\n      const response = await firstValueFrom(\n        this.httpService.get<User>(`${adminAPI}/users/${id}`, {\n          headers: getAuthorizationHeader(),\n        }),\n      );\n      return response.data;\n    } catch (err) {\n      Logger.error(`failed to fetch user details ${err}`);\n      throw new HttpException(\n        {\n          error: err?.message,\n        },\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      );\n    }\n  }\n}\n\nexport function getAuthorizationHeader() {\n  return {\n    Authorization: contextService.get('request').header('Authorization'),\n  };\n}\n","module.exports = require(\"@casl/ability\");","module.exports = require(\"@casl/ability/extra\");","module.exports = require(\"@nestjs/axios\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/mapped-types\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/schedule\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cloudinary\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"request-context\");","module.exports = require(\"rxjs\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport {Logger, ValidationPipe} from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport * as contextService from 'request-context';\nimport { AppModule } from './app/app.module';\nimport {DocumentBuilder, OpenAPIObject, SwaggerModule} from \"@nestjs/swagger\";\nimport * as fs from 'fs';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.enableCors();\n\n  // Swagger\n  const config = new DocumentBuilder()\n    .setTitle('Task')\n    .setDescription(\n      'Task service is responsible for iterative validation of Prototypes. Tasks are created and Feedback is provided through this service.',\n    )\n    .setVersion('1.0')\n    .addBearerAuth({\n      description: 'Authentication is done by a signed JWT',\n      name: 'Authorization',\n      bearerFormat: 'Bearer',\n      type: 'http',\n      in: 'Header',\n    })\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n\n  // save swagger spec file\n  saveSwaggerSpec(document);\n\n  // add global validation\n  app.useGlobalPipes(\n    new ValidationPipe({\n      transform: true,\n      forbidUnknownValues: true,\n    }),\n  );\n  // wrap requests in a middleware namespace 'request'.\n  // thi is done to attach data to request context e.g currently logged in user\n  app.use(contextService.middleware('request'));\n\n  const port = process.env.PORT || 3000;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}`\n  );\n}\n\nfunction saveSwaggerSpec(document: OpenAPIObject) {\n  const fileName = 'apps/task/src/swagger/swagger.json';\n  try {\n    fs.writeFileSync(fileName, JSON.stringify(document));\n  } catch (error) {\n    console.error('Error in saving swagger file', fileName, error);\n  }\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}